"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º backup
"""
import os
import sys
import threading
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.insert(0, str(Path(__file__).parent))

from src.main import app
from src.database.connection import db
from src.config import config

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º schedule –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
try:
    import schedule
except ImportError:
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ schedule –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup...")
    import subprocess
    subprocess.run([sys.executable, "-m", "pip", "install", "schedule"], check=True)
    import schedule

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ backup"""
    from datetime import datetime
    import subprocess
    
    print(f"[{datetime.now().strftime('%H:%M:%S')}] üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup...")
    
    try:
        result = subprocess.run([sys.executable, "scripts/backup.py"], 
                              capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ Backup –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚ùå –û—à–∏–±–∫–∞ backup")
            
    except Exception as e:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚ùå Backup –æ—à–∏–±–∫–∞: {e}")

def cleanup_old_backups():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö backup"""
    import glob
    import os
    from datetime import datetime
    
    backup_dir = "backups"
    if not os.path.exists(backup_dir):
        return
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    import time
    now = time.time()
    week_ago = now - (7 * 24 * 60 * 60)
    
    count = 0
    for backup_file in glob.glob(f"{backup_dir}/backup_*.sql.gz"):
        if os.path.getmtime(backup_file) < week_ago:
            try:
                os.remove(backup_file)
                count += 1
            except:
                pass
    
    if count > 0:
        print(f"[{datetime.now().strftime('%H:%M:%S')}] üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö backup: {count}")

def backup_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ backup –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule.every().day.at("07:45").do(create_backup)
    schedule.every().day.at("14:00").do(create_backup)
    schedule.every().day.at("03:00").do(cleanup_old_backups)
    
    print("üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
    print("   - –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00 –∏ 14:00")
    print("   - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ 03:00")
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π backup
    create_backup()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            time.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç

def start_backup_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    backup_thread = threading.Thread(target=backup_scheduler, daemon=True)
    backup_thread.start()
    return backup_thread

def check_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    if not db.test_connection():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return False
    
    try:
        with db.get_cursor() as cursor:
            cursor.execute("SELECT COUNT(*) as count FROM patients")
            patients = cursor.fetchone()['count']
            
            cursor.execute("SELECT COUNT(*) as count FROM doctors")
            doctors = cursor.fetchone()['count']
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞: {patients} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, {doctors} –≤—Ä–∞—á–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    if not os.path.exists('.encryption_key'):
        print("‚ö†Ô∏è  –°–æ–∑–¥–∞—é –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
        import secrets
        with open('.encryption_key', 'wb') as f:
            f.write(secrets.token_bytes(32))
        print("‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º backup"""
    print("üè• –°–ò–°–¢–ï–ú–ê –≠–õ–ï–ö–¢–†–û–ù–ù–´–• –ú–ï–î–ö–ê–†–¢")
    print("=" * 50)
    
    if not check_system():
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup –≤ —Ñ–æ–Ω–µ
    print("\nüïê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ backup...")
    backup_thread = start_backup_scheduler()
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:8000")
    print("üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/api")
    print("üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    try:
        app.run(
            host=config.API_HOST,
            port=8000,
            debug=config.API_DEBUG
        )
    except KeyboardInterrupt:
        print("\n\nüëã –°–∏—Å—Ç–µ–º–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ backup –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    main()