"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""
import os
import sys
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.insert(0, str(Path(__file__).parent))

from src.main import app
from src.database.connection import db
from src.config import config

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∏ 3–ù–§"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with db.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT table_name, column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                ORDER BY table_name, ordinal_position;
            """)
            
            columns = cursor.fetchall()
            tables = {}
            
            for col in columns:
                table = col['table_name']
                if table not in tables:
                    tables[table] = []
                tables[table].append({
                    'column': col['column_name'],
                    'type': col['data_type'],
                    'nullable': col['is_nullable']
                })
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table_name, cols in tables.items():
                print(f"   üìã {table_name}: {len(cols)} –ø–æ–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ (3–ù–§)
            cursor.execute("""
                SELECT 
                    tc.table_name, 
                    kcu.column_name, 
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name 
                FROM information_schema.table_constraints AS tc 
                JOIN information_schema.key_column_usage AS kcu
                  ON tc.constraint_name = kcu.constraint_name
                  AND tc.table_schema = kcu.table_schema
                JOIN information_schema.constraint_column_usage AS ccu
                  ON ccu.constraint_name = tc.constraint_name
                  AND ccu.table_schema = tc.table_schema
                WHERE tc.constraint_type = 'FOREIGN KEY'
                ORDER BY tc.table_name;
            """)
            
            foreign_keys = cursor.fetchall()
            print(f"‚úÖ –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (3–ù–§): {len(foreign_keys)}")
            for fk in foreign_keys:
                print(f"   üîó {fk['table_name']}.{fk['column_name']} ‚Üí {fk['foreign_table_name']}.{fk['foreign_column_name']}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        return False

def check_indexes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    print("üìá –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT 
                    schemaname,
                    tablename,
                    indexname,
                    indexdef
                FROM pg_indexes 
                WHERE schemaname = 'public'
                ORDER BY tablename, indexname;
            """)
            
            indexes = cursor.fetchall()
            required_indexes = [
                'idx_patients_name',
                'idx_patients_birth_date', 
                'idx_appointments_date',
                'idx_appointments_patient',
                'idx_appointments_doctor'
            ]
            
            found_indexes = [idx['indexname'] for idx in indexes]
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}")
            
            missing = [idx for idx in required_indexes if idx not in found_indexes]
            if missing:
                print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–µ–∫—Å—ã: {missing}")
                return False
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞–π–¥–µ–Ω—ã")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False

def check_encryption():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ–∑–æ–≤"""
    print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        encryption_key = '.encryption_key'
        if not os.path.exists(encryption_key):
            print("‚ö†Ô∏è  –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é...")
            import secrets
            with open(encryption_key, 'wb') as f:
                f.write(secrets.token_bytes(32))
            os.chmod(encryption_key, 0o600)
            print("‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'medical_records' 
                AND column_name IN ('diagnosis_encrypted', 'diagnosis_iv');
            """)
            
            encryption_fields = cursor.fetchall()
            if len(encryption_fields) == 2:
                print("‚úÖ –ü–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
                return True
            else:
                print("‚ùå –ü–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def check_backup_tools():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ backup –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pg_dump
        result = subprocess.run(['pg_dump', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ pg_dump –¥–æ—Å—Ç—É–ø–µ–Ω:", result.stdout.strip())
        else:
            print("‚ùå pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ backup
        backup_scripts = [
            'scripts/backup.sh',
            'scripts/restore.sh'
        ]
        
        missing_scripts = []
        for script in backup_scripts:
            if not os.path.exists(script):
                missing_scripts.append(script)
        
        if missing_scripts:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {missing_scripts}")
        else:
            print("‚úÖ Backup —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        
        return len(missing_scripts) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ backup: {e}")
        return False

def check_replication_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏...")
    
    try:
        with db.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
            cursor.execute("SHOW wal_level;")
            wal_level = cursor.fetchone()[0]
            
            cursor.execute("SHOW max_wal_senders;")
            max_wal_senders = cursor.fetchone()[0]
            
            print(f"üìä WAL level: {wal_level}")
            print(f"üìä Max WAL senders: {max_wal_senders}")
            
            if wal_level in ['replica', 'logical'] and int(max_wal_senders) > 0:
                print("‚úÖ –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return True
            else:
                print("‚ö†Ô∏è  –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

def check_sql_injection_protection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π"""
    print("üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        from src.security.sql_injection_test import SQLInjectionTester
        tester = SQLInjectionTester()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤
        safe_count, vulnerable_count, protected_count = tester.test_search_injection()
        
        total_tests = safe_count + vulnerable_count + protected_count
        security_score = ((safe_count + protected_count) / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìä –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_score:.1f}%")
        print(f"   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö: {safe_count}")
        print(f"   üõ°Ô∏è  –ó–∞—â–∏—â–µ–Ω–æ –ë–î: {protected_count}")
        print(f"   ‚ùå –£—è–∑–≤–∏–º—ã—Ö: {vulnerable_count}")
        
        return security_score >= 95
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False

def check_documentation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    docs = [
        'docs/admin_guide.md',
        'docs/er_diagram.puml',
        'web_interface.html'
    ]
    
    found_docs = []
    missing_docs = []
    
    for doc in docs:
        if os.path.exists(doc):
            found_docs.append(doc)
        else:
            missing_docs.append(doc)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(found_docs)}")
    for doc in found_docs:
        print(f"   üìÑ {doc}")
    
    if missing_docs:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_docs}")
    
    return len(missing_docs) == 0

def run_comprehensive_check():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üè• –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ú–ï–î–ö–ê–†–¢")
    print("=" * 60)
    
    checks = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", lambda: db.test_connection()),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î (3–ù–§)", check_database_structure),
        ("–ò–Ω–¥–µ–∫—Å—ã –ø–æ–∏—Å–∫–∞", check_indexes),
        ("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES-256", check_encryption),
        ("Backup –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", check_backup_tools),
        ("–†–µ–ø–ª–∏–∫–∞—Ü–∏—è", check_replication_config),
        ("–ó–∞—â–∏—Ç–∞ –æ—Ç SQL-injection", check_sql_injection_protection),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", check_documentation)
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\nüîç {name}...")
        try:
            result = check_func()
            results.append((name, result))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
            print(f"   {status}")
        except Exception as e:
            results.append((name, False))
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {name}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!")
    elif passed >= total * 0.8:
        print("üëç –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï (–µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è)")
    else:
        print("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
    
    return passed >= total * 0.7  # 70% - –º–∏–Ω–∏–º—É–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –≠–õ–ï–ö–¢–†–û–ù–ù–´–• –ú–ï–î–ö–ê–†–¢")
    print("=" * 50)
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not run_comprehensive_check():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    print(f"\nüåü –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!")
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:8000")
    print("üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/api")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    try:
        app.run(
            host=config.API_HOST,
            port=8000,
            debug=config.API_DEBUG
        )
    except KeyboardInterrupt:
        print("\n\nüëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    main()