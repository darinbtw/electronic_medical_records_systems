#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""
import os
import sys
import subprocess
import platform

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîÑ {description}...")
    result = subprocess.run(cmd, shell=True)
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏: {description}")
        return False
    print(f"‚úÖ {description} - –≥–æ—Ç–æ–≤–æ!")
    return True

def check_psql():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ psql"""
    try:
        result = subprocess.run("psql --version", shell=True, capture_output=True)
        return result.returncode == 0
    except:
        return False

def main():
    print("üè• –£–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ –≠–õ–ï–ö–¢–†–û–ù–ù–´–• –ú–ï–î–ö–ê–†–¢")
    print("=" * 50)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not run_command("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not run_command("python tests/test_connection.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"):
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    if not run_command("python src/database/create_table.py", "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"):
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if check_psql():
        # –ï—Å–ª–∏ psql –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if platform.system() == "Windows":
            cmd = 'psql -U postgres -d medical_records -f "src/sql_test_query/basic_test_data.sql"'
        else:
            cmd = "psql -U postgres -d medical_records -f src/sql_test_query/basic_test_data.sql"
        
        if not run_command(cmd, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ psql"):
            print("‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Python...")
            if not run_command("python src/database/load_test_data.py", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                return False
    else:
        # psql –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Python
        print("‚ÑπÔ∏è  psql –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Python –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        if not run_command("python src/database/load_test_data.py", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
            return False
    
    print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    print("   python run.py")
    
    # –°–æ–∑–¥–∞–µ–º .encryption_key –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('.encryption_key'):
        print("\nüîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
        import secrets
        with open('.encryption_key', 'wb') as f:
            f.write(secrets.token_bytes(32))
        print("‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
    
    return True

if __name__ == "__main__":
    success = main()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(0 if success else 1)