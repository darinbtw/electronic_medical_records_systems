#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ PostgreSQL
–î–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ - —Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞ 3 –Ω–æ–¥–∞—Ö
"""
import os
import sys
from datetime import datetime

class ReplicationDemo:
    def __init__(self):
        self.master_ip = "192.168.1.10"
        self.slave1_ip = "192.168.1.11"
        self.slave2_ip = "192.168.1.12"
        
    def print_header(self, text):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        print("\n" + "="*60)
        print(f"üîß {text}")
        print("="*60)
    
    def demo_master_setup(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Master"""
        self.print_header("–ù–ê–°–¢–†–û–ô–ö–ê MASTER –£–ó–õ–ê")
        
        print(f"üìç IP –∞–¥—Ä–µ—Å: {self.master_ip}")
        print("\n1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ postgresql.conf:")
        print("""
# Replication Master Settings
wal_level = replica
max_wal_senders = 5
wal_keep_segments = 64
archive_mode = on
archive_command = 'test ! -f /archive/%f && cp %p /archive/%f'
synchronous_commit = on
synchronous_standby_names = 'slave1,slave2'
        """)
        
        print("\n2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ pg_hba.conf:")
        print(f"""
# Replication connections
host    replication     replicator      {self.slave1_ip}/32    md5
host    replication     replicator      {self.slave2_ip}/32    md5
        """)
        
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏:")
        print("CREATE USER replicator WITH REPLICATION PASSWORD 'repl_password';")
        
        print("\n‚úÖ Master –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    def demo_slave_setup(self, slave_name, slave_ip):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Slave"""
        self.print_header(f"–ù–ê–°–¢–†–û–ô–ö–ê {slave_name.upper()} –£–ó–õ–ê")
        
        print(f"üìç IP –∞–¥—Ä–µ—Å: {slave_ip}")
        print(f"üìç –ò–º—è —É–∑–ª–∞: {slave_name}")
        
        print("\n1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL:")
        print("systemctl stop postgresql")
        
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ backup —Å master:")
        print(f"""
pg_basebackup \\
    -h {self.master_ip} \\
    -D /var/lib/postgresql/14/main \\
    -U replicator \\
    -v -P -W \\
    -R -X stream \\
    -C -S {slave_name}
        """)
        
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ postgresql.auto.conf:")
        print(f"""
primary_conninfo = 'host={self.master_ip} port=5432 user=replicator password=repl_password application_name={slave_name}'
restore_command = 'cp /archive/%f %p'
recovery_target_timeline = 'latest'
        """)
        
        print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ standby.signal")
        print("touch /var/lib/postgresql/14/main/standby.signal")
        
        print(f"\n‚úÖ {slave_name} –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    def demo_replication_check(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –†–ï–ü–õ–ò–ö–ê–¶–ò–ò")
        
        print("\nüìä –ù–∞ MASTER —É–∑–ª–µ:")
        print("SELECT client_addr, state, sync_state FROM pg_stat_replication;")
        print("\n–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("""
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  client_addr    ‚îÇ    state    ‚îÇ sync_state ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ 192.168.1.11    ‚îÇ  streaming  ‚îÇ    sync    ‚îÇ
‚îÇ 192.168.1.12    ‚îÇ  streaming  ‚îÇ    sync    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        """)
        
        print("\nüìä –ù–∞ SLAVE —É–∑–ª–∞—Ö:")
        print("SELECT pg_is_in_recovery();")
        print("\n–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: true")
        
    def generate_docker_compose(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è docker-compose –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header("DOCKER-COMPOSE –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        
        print("""
version: '3.8'

services:
  postgres-master:
    image: postgres:16
    environment:
      POSTGRES_DB: medical_records
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: repl_password
    ports:
      - "5432:5432"
    networks:
      - postgres-network
    volumes:
      - master-data:/var/lib/postgresql/data

  postgres-slave1:
    image: postgres:14
    environment:
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_SERVICE: postgres-master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: repl_password
    ports:
      - "5433:5432"
    depends_on:
      - postgres-master
    networks:
      - postgres-network
    volumes:
      - slave1-data:/var/lib/postgresql/data

  postgres-slave2:
    image: postgres:14
    environment:
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_SERVICE: postgres-master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: repl_password
    ports:
      - "5434:5432"
    depends_on:
      - postgres-master
    networks:
      - postgres-network
    volumes:
      - slave2-data:/var/lib/postgresql/data

networks:
  postgres-network:
    driver: bridge

volumes:
  master-data:
  slave1-data:
  slave2-data:
        """)
        
        print("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ docker-compose-replication.yml")
        print("\n–ó–∞–ø—É—Å–∫: docker-compose -f docker-compose-replication.yml up")
    
    def test_failover_scenario(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
        self.print_header("–°–¶–ï–ù–ê–†–ò–ô –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–ò")
        
        print("1Ô∏è‚É£ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞:")
        print("   Master (W) ‚Üê Slave1 (R)")
        print("           ‚Üñ")
        print("             Slave2 (R)")
        
        print("\n2Ô∏è‚É£ –û—Ç–∫–∞–∑ Master:")
        print("   Master (X) ‚Üê Slave1 (R)")
        print("           ‚Üñ")
        print("             Slave2 (R)")
        
        print("\n3Ô∏è‚É£ –ü—Ä–æ–º–æ—É—Ç Slave1 –≤ Master:")
        print("   # –ù–∞ Slave1:")
        print("   pg_ctl promote")
        print("   # –∏–ª–∏")
        print("   SELECT pg_promote();")
        
        print("\n4Ô∏è‚É£ –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print("   Old Master (X)   Slave1‚ÜíMaster (W)")
        print("                            ‚Üñ")
        print("                              Slave2 (R)")
        
        print("\n5Ô∏è‚É£ –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Slave2:")
        print("   –ò–∑–º–µ–Ω–∏—Ç—å primary_conninfo –Ω–∞ –Ω–æ–≤—ã–π Master")
    
    def generate_monitoring_queries(self):
        """SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.print_header("SQL –ó–ê–ü–†–û–°–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        
        queries = {
            "–°—Ç–∞—Ç—É—Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Master": """
-- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–µ–ø–ª–∏–∫
SELECT 
    pid,
    usename,
    application_name,
    client_addr,
    state,
    sync_state,
    sync_priority,
    pg_size_pretty(pg_wal_lsn_diff(sent_lsn, replay_lsn)) as lag
FROM pg_stat_replication
ORDER BY application_name;
            """,
            
            "–õ–∞–≥ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏": """
-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è —Ä–µ–ø–ª–∏–∫
SELECT 
    application_name,
    pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), replay_lsn)) AS replication_lag,
    replay_lag
FROM pg_stat_replication;
            """,
            
            "–°—Ç–∞—Ç—É—Å –Ω–∞ Slave": """
-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ recovery
SELECT pg_is_in_recovery();

-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Master
SELECT * FROM pg_stat_wal_receiver;
            """,
            
            "–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏": """
-- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ—Ç–æ–≤ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
SELECT slot_name, plugin, slot_type, active, 
       pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), restart_lsn)) as behind_master
FROM pg_replication_slots;
            """
        }
        
        for name, query in queries.items():
            print(f"\nüìã {name}:")
            print(query)
    
    def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üè• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ô–ö–ò –†–ï–ü–õ–ò–ö–ê–¶–ò–ò PostgreSQL")
        print("–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–∞—Ä—Ç")
        print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∑–ª–æ–≤
        self.demo_master_setup()
        self.demo_slave_setup("slave1", self.slave1_ip)
        self.demo_slave_setup("slave2", self.slave2_ip)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        self.demo_replication_check()
        
        # –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
        self.test_failover_scenario()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.generate_monitoring_queries()
        
        # Docker
        self.generate_docker_compose()
        
        print("\n" + "="*60)
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("="*60)
        
        print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print("- –°–∫—Ä–∏–ø—Ç: scripts/setup_replication_3nodes.sh")
        print("- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 3 —Å–µ—Ä–≤–µ—Ä–∞ —Å PostgreSQL 16+")
        print("- –°–µ—Ç—å: –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã 5432 –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
        print("- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ docker-compose")

if __name__ == "__main__":
    demo = ReplicationDemo()
    demo.run_demo()