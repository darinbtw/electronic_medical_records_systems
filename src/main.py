"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–∏—Å—Ç–µ–º—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–∞—Ä—Ç
"""
from flask import Flask, jsonify, request
from src.database.connection import db
from src.models.patient import Patient
from src.models.doctor import Doctor
from src.api.validators import Validators
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return jsonify({
        "name": "Medical Records System API",
        "version": "1.0",
        "endpoints": {
            "health": "/health",
            "patients": "/api/patients",
            "doctors": "/api/doctors",
            "search": "/api/search"
        }
    })

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if db.test_connection():
            return jsonify({
                "status": "healthy",
                "database": "connected",
                "message": "System is operational"
            })
    except Exception as e:
        logger.error(f"Health check failed: {e}")
    
    return jsonify({
        "status": "unhealthy",
        "database": "disconnected",
        "error": str(e)
    }), 500

@app.route('/api/patients', methods=['GET'])
def get_patients():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT id, first_name, last_name, middle_name, 
                       birth_date, gender, phone, email
                FROM patients
                ORDER BY last_name, first_name
                LIMIT 100
            """)
            patients = cursor.fetchall()
            return jsonify({"patients": patients, "count": len(patients)})
    except Exception as e:
        logger.error(f"Error fetching patients: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/search', methods=['GET'])
def search_patients():
    """–ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –§–ò–û"""
    query = request.args.get('q', '')
    if len(query) < 3:
        return jsonify({"error": "Query too short (min 3 chars)"}), 400
    
    try:
        with db.get_cursor() as cursor:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            cursor.execute("""
                SELECT id, first_name, last_name, middle_name, phone
                FROM patients
                WHERE last_name ILIKE %s 
                   OR first_name ILIKE %s
                   OR middle_name ILIKE %s
                ORDER BY last_name, first_name
                LIMIT 50
            """, (f'%{query}%', f'%{query}%', f'%{query}%'))
            
            results = cursor.fetchall()
            return jsonify({"results": results, "count": len(results)})
    except Exception as e:
        logger.error(f"Search error: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/validate', methods=['POST'])
def validate_data():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    data = request.json
    results = {}
    
    if 'email' in data:
        results['email'] = {
            'value': data['email'],
            'valid': Validators.validate_email(data['email'])
        }
    
    if 'phone' in data:
        results['phone'] = {
            'value': data['phone'],
            'valid': Validators.validate_phone(data['phone'])
        }
    
    return jsonify(results)

if __name__ == '__main__':
    print("üè• Starting Medical Records System API...")
    print("üìç URL: http://localhost:8000")
    print("üìö Docs: http://localhost:8000/")
    app.run(host='0.0.0.0', port=8000, debug=True)