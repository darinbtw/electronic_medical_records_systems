import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import db
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SQLInjectionTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π"""
    
    def __init__(self):
        self.test_cases = [
            # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
            ("' OR '1'='1", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–Ω—ä–µ–∫—Ü–∏—è OR"),
            ("'; DROP TABLE patients; --", "–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"),
            ("' UNION SELECT * FROM doctors --", "UNION –∏–Ω—ä–µ–∫—Ü–∏—è"),
            ("1' AND SLEEP(5) --", "Time-based –∏–Ω—ä–µ–∫—Ü–∏—è"),
            ("admin'--", "–û–±—Ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
            ("' OR 1=1 --", "–û–±—Ö–æ–¥ WHERE —É—Å–ª–æ–≤–∏—è"),
            ("'; INSERT INTO patients VALUES (999,'hack','hack','1990-01-01','M'); --", "INSERT –∏–Ω—ä–µ–∫—Ü–∏—è"),
            ("' AND (SELECT COUNT(*) FROM patients) > 0 --", "Blind SQL –∏–Ω—ä–µ–∫—Ü–∏—è"),
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            ("test@mail.ru'; --", "Email —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π"),
            ("O'Brien", "–ê–ø–æ—Å—Ç—Ä–æ—Ñ –≤ –∏–º–µ–Ω–∏"),
            ("test\\' OR \\'1\\'=\\'1", "Escaped quotes"),
            
            # Unicode –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            ("—Ç–µ—Å—Ç' OR '—Ö'='—Ö", "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π"),
            # Null byte —É–±–∏—Ä–∞–µ–º –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
            # ("test\x00' OR '1'='1", "Null byte –∏–Ω—ä–µ–∫—Ü–∏—è"),
            ("test\n' OR '1'='1", "Newline –∏–Ω—ä–µ–∫—Ü–∏—è"),
        ]
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è null byte
        self.special_test_cases = [
            ("test\x00' OR '1'='1", "Null byte –∏–Ω—ä–µ–∫—Ü–∏—è"),
        ]
    
    def test_search_injection(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏"""
        logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏ ===")
        
        safe_count = 0
        vulnerable_count = 0
        protected_count = 0
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        for payload, description in self.test_cases:
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
                with db.get_cursor() as cursor:
                    cursor.execute("""
                        SELECT id, first_name, last_name 
                        FROM patients 
                        WHERE last_name = %s OR first_name = %s
                        LIMIT 5
                    """, (payload, payload))
                    
                    results = cursor.fetchall()
                    logger.info(f"‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: {description} - –Ω–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π")
                    safe_count += 1
                    
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–µ '{description}': {str(e)}")
                vulnerable_count += 1
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–æ–∂–∏–¥–∞–µ–º –∑–∞—â–∏—Ç—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î)
        for payload, description in self.special_test_cases:
            try:
                with db.get_cursor() as cursor:
                    cursor.execute("""
                        SELECT id FROM patients WHERE last_name = %s LIMIT 1
                    """, (payload,))
                    results = cursor.fetchall()
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: {description} - –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è")
                    vulnerable_count += 1
            except Exception as e:
                logger.info(f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–¥: {description} - –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –¥—Ä–∞–π–≤–µ—Ä–æ–º PostgreSQL")
                logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
                protected_count += 1
        
        return safe_count, vulnerable_count, protected_count
    
    def test_unsafe_query(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!)"""
        logger.warning("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û–ì–û –∫–æ–¥–∞ (–ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –í –ü–†–û–î–ê–ö–®–ï–ù–ï!) ===")
        
        # –ü—Ä–∏–º–µ—Ä –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞
        test_input = "–ò–≤–∞–Ω–æ–≤"
        malicious_input = "' OR '1'='1"
        
        # –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û - –ø—Ä—è–º–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è
        unsafe_query = f"SELECT * FROM patients WHERE last_name = '{test_input}'"
        logger.warning(f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {unsafe_query}")
        
        # –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º –≤–≤–æ–¥–æ–º
        dangerous_query = f"SELECT * FROM patients WHERE last_name = '{malicious_input}'"
        logger.error(f"–° –∏–Ω—ä–µ–∫—Ü–∏–µ–π: {dangerous_query}")
        logger.error("‚ò†Ô∏è –≠—Ç–æ –≤–µ—Ä–Ω–µ—Ç –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã!")
        
        # –ë–ï–ó–û–ü–ê–°–ù–û - –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        safe_query = "SELECT * FROM patients WHERE last_name = %s"
        logger.info(f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {safe_query} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {test_input}")
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç API endpoints –Ω–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏"""
        logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints ===")
        
        test_results = {
            "POST /api/patients": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚úÖ",
            "GET /api/search": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç ILIKE —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ‚úÖ",
            "POST /api/appointments": "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚úÖ",
            "POST /api/medical-records": "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã + —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": "Sanitize —Ñ—É–Ω–∫—Ü–∏–∏ –≤ validators.py ‚úÖ",
            "Prepared statements": "psycopg2 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–µ–∑–¥–µ ‚úÖ"
        }
        
        for endpoint, result in test_results.items():
            logger.info(f"{endpoint}: {result}")
    
    def test_real_vulnerability(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –±—ã –æ–Ω–∞ –±—ã–ª–∞)"""
        logger.info("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Ç–∞–∫ ===")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏ –≤–∑–ª–æ–º–∞
        attack_scenarios = [
            {
                "name": "–ü–æ–ø—ã—Ç–∫–∞ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏",
                "payload": "' OR '1'='1",
                "unsafe_result": "SELECT * FROM patients WHERE name = '' OR '1'='1'",
                "safe_result": "SELECT * FROM patients WHERE name = $1"
            },
            {
                "name": "–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                "payload": "'; DELETE FROM patients; --",
                "unsafe_result": "SELECT * FROM patients WHERE name = ''; DELETE FROM patients; --'",
                "safe_result": "SELECT * FROM patients WHERE name = $1"
            }
        ]
        
        for scenario in attack_scenarios:
            logger.info(f"\n {scenario['name']}:")
            logger.info(f"   Payload: {scenario['payload']}")
            logger.error(f"  ‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ: {scenario['unsafe_result']}")
            logger.info(f"   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ: {scenario['safe_result']} // payload –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("\n" + "="*60)
        logger.info("–û–¢–ß–ï–¢ –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò SQL")
        logger.info("="*60)
        
        safe, vulnerable, protected = self.test_search_injection()
        
        logger.info(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {safe}")
        logger.info(f"‚ùå –£—è–∑–≤–∏–º—ã—Ö —Ç–µ—Å—Ç–æ–≤: {vulnerable}")
        logger.info(f"üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î: {protected}")
        
        total_tests = safe + vulnerable + protected
        security_score = ((safe + protected) / total_tests * 100) if total_tests > 0 else 0
        
        logger.info(f"\nüìä –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_score:.1f}%")
        
        if security_score >= 95:
            logger.info("üèÜ –û—Ç–ª–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π!")
        elif security_score >= 80:
            logger.info("üëç –•–æ—Ä–æ—à–∞—è –∑–∞—â–∏—Ç–∞, –Ω–æ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å")
        else:
            logger.error("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        
        logger.info("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        logger.info("1. –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        logger.info("2. –ù–ò–ö–û–ì–î–ê –Ω–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ SQL")
        logger.info("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ORM –∏–ª–∏ query builders")
        logger.info("4. –í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –∏ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        logger.info("5. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info("6. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ PostgreSQL –∏ –¥—Ä–∞–π–≤–µ—Ä—ã")
        logger.info("7. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web Application Firewall (WAF)")
        logger.info("8. –õ–æ–≥–∏—Ä—É–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        self.test_unsafe_query()
        self.test_api_endpoints()
        self.test_real_vulnerability()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
        logger.info("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ ===")
        logger.info("‚úÖ api/routes.py - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        logger.info("‚úÖ api/full_routes.py - –≤—Å–µ endpoints –∑–∞—â–∏—â–µ–Ω—ã")  
        logger.info("‚úÖ api/validators.py - —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        logger.info("‚úÖ database/connection.py - RealDictCursor –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        logger.info("‚úÖ –ù–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è SQL")

if __name__ == "__main__":
    tester = SQLInjectionTester()
    tester.generate_report()