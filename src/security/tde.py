"""
–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Transparent Data Encryption (TDE) –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–µ–¥–∫–∞—Ä—Ç
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys
import base64
import logging
import hashlib
import secrets
from typing import Optional, Dict, Any, List, Tuple, Union
from datetime import datetime, timedelta
from contextlib import contextmanager

# –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding, hashes, serialization
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
import psycopg2
from psycopg2.extras import RealDictCursor, Json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))
sys.path.insert(0, project_root)

class TDEKeyManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á–µ–π –¥–ª—è TDE
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º, —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self):
        self.backend = default_backend()
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π
        self.master_key_file = os.getenv('TDE_MASTER_KEY_FILE', '.tde_master_key')
        self.key_rotation_days = int(os.getenv('TDE_KEY_ROTATION_DAYS', 90))
        self.backup_keys = os.getenv('TDE_BACKUP_KEYS', 'True').lower() == 'true'
        
        # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.key_length = 32  # 256 –±–∏—Ç
        self.salt_length = 16  # 128 –±–∏—Ç
        self.iv_length = 16   # 128 –±–∏—Ç
        self.iterations = 100000  # PBKDF2 –∏—Ç–µ—Ä–∞—Ü–∏–∏
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._ensure_master_key()
        self._initialize_table_keys()
    
    def _ensure_master_key(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        if os.path.exists(self.master_key_file):
            self._load_master_key()
        else:
            self._create_master_key()
    
    def _create_master_key(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –∫–ª—é—á
            self.master_key = secrets.token_bytes(self.key_length)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
            key_metadata = {
                'created_at': datetime.now().isoformat(),
                'version': '1.0',
                'algorithm': 'AES-256-CBC',
                'key_derivation': 'PBKDF2-HMAC-SHA256',
                'iterations': self.iterations
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            key_data = {
                'master_key': base64.b64encode(self.master_key).decode(),
                'metadata': key_metadata
            }
            
            import json
            with open(self.master_key_file, 'w') as f:
                json.dump(key_data, f, indent=2)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            os.chmod(self.master_key_file, 0o600)
            
            self.logger.info("üîë –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á TDE")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            if self.backup_keys:
                self._backup_key()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
            raise
    
    def _load_master_key(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        try:
            import json
            with open(self.master_key_file, 'r') as f:
                key_data = json.load(f)
            
            self.master_key = base64.b64decode(key_data['master_key'])
            self.key_metadata = key_data.get('metadata', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
            self._check_key_rotation()
            
            self.logger.info("üîë –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á TDE")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
            raise
    
    def _backup_key(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–ª—é—á–∞"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_file = f"{self.master_key_file}.backup.{timestamp}"
            
            import shutil
            shutil.copy2(self.master_key_file, backup_file)
            os.chmod(backup_file, 0o600)
            
            self.logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–ª—é—á–∞: {backup_file}")
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup –∫–ª—é—á–∞: {e}")
    
    def _check_key_rotation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–∞"""
        try:
            created_str = self.key_metadata.get('created_at')
            if not created_str:
                return
            
            created_date = datetime.fromisoformat(created_str)
            age_days = (datetime.now() - created_date).days
            
            if age_days >= self.key_rotation_days:
                self.logger.warning(f"‚ö†Ô∏è –ö–ª—é—á TDE —É—Å—Ç–∞—Ä–µ–ª ({age_days} –¥–Ω–µ–π). –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ—Ç–∞—Ü–∏—è!")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")
    
    def _initialize_table_keys(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        self.encryption_config = {
            'patients': {
                'fields': ['phone', 'email', 'address'],
                'sensitivity': 'high'  # –í—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            },
            'doctors': {
                'fields': ['phone', 'email'],
                'sensitivity': 'medium'
            },
            'medical_records': {
                'fields': ['diagnosis', 'complaints', 'examination_results'],
                'sensitivity': 'critical'  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            },
            'prescriptions': {
                'fields': ['notes'],
                'sensitivity': 'medium'
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.table_keys = {}
        for table_name, config in self.encryption_config.items():
            self.table_keys[table_name] = self._derive_table_key(table_name, config['sensitivity'])
    
    def _derive_table_key(self, table_name: str, sensitivity: str) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–æ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        salt_base = f"tde_medical_system_{table_name}_{sensitivity}_2024"
        salt = hashlib.sha256(salt_base.encode()).digest()[:self.salt_length]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        iteration_multiplier = {
            'critical': 2.0,  # 200,000 –∏—Ç–µ—Ä–∞—Ü–∏–π
            'high': 1.5,      # 150,000 –∏—Ç–µ—Ä–∞—Ü–∏–π  
            'medium': 1.0,    # 100,000 –∏—Ç–µ—Ä–∞—Ü–∏–π
            'low': 0.5        # 50,000 –∏—Ç–µ—Ä–∞—Ü–∏–π
        }
        
        iterations = int(self.iterations * iteration_multiplier.get(sensitivity, 1.0))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PBKDF2 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=self.key_length,
            salt=salt,
            iterations=iterations,
            backend=self.backend
        )
        
        return kdf.derive(self.master_key)
    
    def rotate_master_key(self):
        """–†–æ—Ç–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        self.logger.info("üîÑ –ù–∞—á–∞–ª–æ —Ä–æ—Ç–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ TDE...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º backup —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
            if self.backup_keys:
                self._backup_key()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            old_master_key = self.master_key
            old_table_keys = self.table_keys.copy()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á
            self._create_master_key()
            self._initialize_table_keys()
            
            # –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            self._reencrypt_all_data(old_table_keys)
            
            self.logger.info("‚úÖ –†–æ—Ç–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")
            raise
    
    def _reencrypt_all_data(self, old_table_keys: Dict[str, bytes]):
        """–ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
        self.logger.info("üîÑ –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        from src.database.connection import db
        
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=RealDictCursor)
                
                total_records = 0
                
                for table_name, config in self.encryption_config.items():
                    encrypted_fields = config['fields']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    where_conditions = []
                    for field in encrypted_fields:
                        where_conditions.append(f"{field}_encrypted IS NOT NULL")
                    
                    if not where_conditions:
                        continue
                    
                    query = f"""
                        SELECT id, {', '.join([f'{field}_encrypted, {field}_iv' for field in encrypted_fields])}
                        FROM {table_name} 
                        WHERE {' OR '.join(where_conditions)}
                    """
                    
                    cursor.execute(query)
                    records = cursor.fetchall()
                    
                    self.logger.info(f"–ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ {len(records)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                    
                    for record in records:
                        record_id = record['id']
                        update_parts = []
                        update_values = []
                        
                        for field in encrypted_fields:
                            encrypted_field = f"{field}_encrypted"
                            iv_field = f"{field}_iv"
                            
                            if record.get(encrypted_field) and record.get(iv_field):
                                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º
                                old_plaintext = self._decrypt_with_key(
                                    bytes(record[encrypted_field]),
                                    bytes(record[iv_field]),
                                    old_table_keys[table_name]
                                )
                                
                                # –®–∏—Ñ—Ä—É–µ–º –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
                                new_ciphertext, new_iv = self._encrypt_with_key(
                                    old_plaintext,
                                    self.table_keys[table_name]
                                )
                                
                                update_parts.append(f"{encrypted_field} = %s, {iv_field} = %s")
                                update_values.extend([new_ciphertext, new_iv])
                        
                        if update_parts:
                            update_query = f"""
                                UPDATE {table_name} 
                                SET {', '.join(update_parts)}
                                WHERE id = %s
                            """
                            update_values.append(record_id)
                            
                            cursor.execute(update_query, update_values)
                            total_records += 1
                
                conn.commit()
                self.logger.info(f"‚úÖ –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ {total_records} –∑–∞–ø–∏—Å–µ–π")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def _encrypt_with_key(self, plaintext: str, key: bytes) -> Tuple[bytes, bytes]:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º"""
        iv = secrets.token_bytes(self.iv_length)
        
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=self.backend)
        encryptor = cipher.encryptor()
        
        padder = padding.PKCS7(128).padder()
        padded_data = padder.update(plaintext.encode('utf-8')) + padder.finalize()
        
        ciphertext = encryptor.update(padded_data) + encryptor.finalize()
        
        return ciphertext, iv
    
    def _decrypt_with_key(self, ciphertext: bytes, iv: bytes, key: bytes) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º"""
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=self.backend)
        decryptor = cipher.decryptor()
        
        padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()
        
        unpadder = padding.PKCS7(128).unpadder()
        plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()
        
        return plaintext.decode('utf-8')


class TDEManager:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä TDE
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self):
        self.backend = default_backend()
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á–µ–π
        self.key_manager = TDEKeyManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.cache_enabled = True
        self.max_cache_size = 1000
        self._encryption_cache = {}
        
    @property
    def encryption_config(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        return self.key_manager.encryption_config
    
    @property
    def table_keys(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü"""
        return self.key_manager.table_keys
    
    def encrypt_field(self, table_name: str, field_name: str, value: str) -> Tuple[Optional[bytes], Optional[bytes]]:
        """
        –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Tuple[bytes, bytes]: (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ, iv) –∏–ª–∏ (None, None)
        """
        if not value or not value.strip():
            return None, None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –ø–æ–ª–µ
        config = self.encryption_config.get(table_name, {})
        if field_name not in config.get('fields', []):
            # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return value.encode('utf-8'), b''
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            table_key = self.table_keys.get(table_name)
            if not table_key:
                raise ValueError(f"–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}")
            
            # –®–∏—Ñ—Ä—É–µ–º
            ciphertext, iv = self.key_manager._encrypt_with_key(value, table_key)
            
            self.logger.debug(f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–µ {table_name}.{field_name}")
            return ciphertext, iv
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è {table_name}.{field_name}: {e}")
            raise
    
    def decrypt_field(self, table_name: str, field_name: str, ciphertext: bytes, iv: bytes) -> str:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
            ciphertext: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            iv: Initialization vector
            
        Returns:
            str: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if not ciphertext or not iv:
            return ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø–æ–ª–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
        config = self.encryption_config.get(table_name, {})
        if field_name not in config.get('fields', []):
            # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —à–∏—Ñ—Ä–æ–≤–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            return ciphertext.decode('utf-8') if isinstance(ciphertext, bytes) else str(ciphertext)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            table_key = self.table_keys.get(table_name)
            if not table_key:
                raise ValueError(f"–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}")
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            plaintext = self.key_manager._decrypt_with_key(ciphertext, iv, table_key)
            
            self.logger.debug(f"üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–µ {table_name}.{field_name}")
            return plaintext
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ {table_name}.{field_name}: {e}")
            return f"[–û–®–ò–ë–ö–ê –†–ê–°–®–ò–§–†–û–í–ö–ò: {str(e)[:50]}]"
    
    def encrypt_record(self, table_name: str, record_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞–ø–∏—Å–∏
        
        Args:
            table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            record_data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            
        Returns:
            Dict: –ó–∞–ø–∏—Å—å —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        """
        encrypted_record = record_data.copy()
        
        config = self.encryption_config.get(table_name, {})
        fields_to_encrypt = config.get('fields', [])
        
        for field_name in fields_to_encrypt:
            if field_name in encrypted_record and encrypted_record[field_name]:
                value = str(encrypted_record[field_name])
                
                # –®–∏—Ñ—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                ciphertext, iv = self.encrypt_field(table_name, field_name, value)
                
                # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                encrypted_record[f"{field_name}_encrypted"] = ciphertext
                encrypted_record[f"{field_name}_iv"] = iv
                
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –∑–∞–ø–∏—Å–∏
                del encrypted_record[field_name]
        
        return encrypted_record
    
    def decrypt_record(self, table_name: str, record_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞–ø–∏—Å–∏
        
        Args:
            table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            record_data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            
        Returns:
            Dict: –ó–∞–ø–∏—Å—å —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        """
        decrypted_record = record_data.copy()
        
        config = self.encryption_config.get(table_name, {})
        fields_to_decrypt = config.get('fields', [])
        
        for field_name in fields_to_decrypt:
            encrypted_field = f"{field_name}_encrypted"
            iv_field = f"{field_name}_iv"
            
            if encrypted_field in decrypted_record and iv_field in decrypted_record:
                ciphertext = decrypted_record[encrypted_field]
                iv = decrypted_record[iv_field]
                
                if ciphertext and iv:
                    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
                    plaintext = self.decrypt_field(table_name, field_name, ciphertext, iv)
                    decrypted_record[field_name] = plaintext
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    del decrypted_record[encrypted_field]
                    del decrypted_record[iv_field]
        
        return decrypted_record
    
    def get_encryption_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'algorithm': 'AES-256-CBC',
            'key_derivation': 'PBKDF2-HMAC-SHA256',
            'iterations': self.key_manager.iterations,
            'master_key_exists': os.path.exists(self.key_manager.master_key_file),
            'key_metadata': getattr(self.key_manager, 'key_metadata', {}),
            'encrypted_tables': list(self.encryption_config.keys()),
            'total_encrypted_fields': sum(len(config['fields']) for config in self.encryption_config.values()),
            'table_details': self.encryption_config
        }


class TDEDatabaseConnection:
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º TDE
    –ü—Ä–æ–∑—Ä–∞—á–Ω–æ —à–∏—Ñ—Ä—É–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –ë–î
    """
    
    def __init__(self, connection_params: Dict[str, Any]):
        self.connection_params = connection_params
        self.tde = TDEManager()
        self.logger = logging.getLogger(__name__)
    
    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å TDE"""
        conn = None
        try:
            conn = psycopg2.connect(**self.connection_params)
            yield conn
            conn.commit()
        except Exception as e:
            if conn:
                conn.rollback()
            self.logger.error(f"Database error: {e}")
            raise e
        finally:
            if conn:
                conn.close()
    
    @contextmanager
    def get_cursor(self, cursor_factory=RealDictCursor):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞ —Å TDE"""
        with self.get_connection() as conn:
            cursor = conn.cursor(cursor_factory=cursor_factory)
            try:
                yield TDECursor(cursor, self.tde)
            finally:
                cursor.close()


class TDECursor:
    """
    –ö—É—Ä—Å–æ—Ä –ë–î —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
    """
    
    def __init__(self, cursor, tde_manager: TDEManager):
        self.cursor = cursor
        self.tde = tde_manager
        self.logger = logging.getLogger(__name__)
    
    def execute(self, query: str, params=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º TDE"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ç–∞–±–ª–∏—Ü—É
        operation_info = self._parse_query(query)
        
        if operation_info['operation'] == 'INSERT' and operation_info['table']:
            # –ü—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if params and isinstance(params, dict):
                encrypted_params = self.tde.encrypt_record(operation_info['table'], params)
                return self.cursor.execute(query, encrypted_params)
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π - –æ–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return self.cursor.execute(query, params)
    
    def fetchone(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π"""
        result = self.cursor.fetchone()
        if result:
            table_name = self._guess_table_from_result(result)
            if table_name:
                return self.tde.decrypt_record(table_name, dict(result))
        return result
    
    def fetchall(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π"""
        results = self.cursor.fetchall()
        if results:
            table_name = self._guess_table_from_result(results[0])
            if table_name:
                return [self.tde.decrypt_record(table_name, dict(row)) for row in results]
        return results
    
    def fetchmany(self, size=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π"""
        results = self.cursor.fetchmany(size)
        if results:
            table_name = self._guess_table_from_result(results[0])
            if table_name:
                return [self.tde.decrypt_record(table_name, dict(row)) for row in results]
        return results
    
    def _parse_query(self, query: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã"""
        query_upper = query.upper().strip()
        
        operation = None
        table = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        if 'INSERT INTO' in query_upper:
            operation = 'INSERT'
            import re
            match = re.search(r'INSERT\s+INTO\s+(\w+)', query_upper)
            if match:
                table = match.group(1).lower()
        elif 'SELECT' in query_upper:
            operation = 'SELECT'
            import re
            match = re.search(r'FROM\s+(\w+)', query_upper)
            if match:
                table = match.group(1).lower()
        elif 'UPDATE' in query_upper:
            operation = 'UPDATE'
            import re
            match = re.search(r'UPDATE\s+(\w+)', query_upper)
            if match:
                table = match.group(1).lower()
        
        return {'operation': operation, 'table': table}
    
    def _guess_table_from_result(self, result_row) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not result_row:
            return None
        
        columns = set(result_row.keys()) if hasattr(result_row, 'keys') else set()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        table_signatures = {
            'patients': {'first_name', 'last_name', 'birth_date', 'gender'},
            'doctors': {'specialization', 'license_number'},
            'appointments': {'appointment_date', 'status', 'patient_id', 'doctor_id'},
            'medical_records': {'appointment_id', 'complaints'},
            'prescriptions': {'medication_name', 'dosage', 'frequency'}
        }
        
        for table_name, signature in table_signatures.items():
            if signature.issubset(columns):
                return table_name
        
        return None
    
    def __getattr__(self, name):
        """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å–æ—Ä—É"""
        return getattr(self.cursor, name)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
def upgrade_database_for_tde():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TDE"""
    print("üîí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –¥–ª—è TDE...")
    
    from src.database.connection import db
    
    tde = TDEManager()
    
    # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ IV
    alter_commands = []
    
    for table_name, config in tde.encryption_config.items():
        fields = config['fields']
        for field_name in fields:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ IV
            alter_commands.extend([
                f"""
                DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = '{table_name}' 
                        AND column_name = '{field_name}_encrypted'
                    ) THEN
                        ALTER TABLE {table_name} ADD COLUMN {field_name}_encrypted BYTEA;
                    END IF;
                END $$;
                """,
                f"""
                DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = '{table_name}' 
                        AND column_name = '{field_name}_iv'
                    ) THEN
                        ALTER TABLE {table_name} ADD COLUMN {field_name}_iv BYTEA;
                    END IF;
                END $$;
                """
            ])
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            for command in alter_commands:
                cursor.execute(command)
                print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ TDE —Å—Ç–æ–ª–±—Ü–æ–≤")
            
            conn.commit()
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TDE")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è TDE –ø–æ–ª–µ–π
            print("üìá –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è TDE...")
            
            index_commands = [
                "CREATE INDEX IF NOT EXISTS idx_patients_phone_encrypted ON patients(phone_encrypted) WHERE phone_encrypted IS NOT NULL;",
                "CREATE INDEX IF NOT EXISTS idx_patients_email_encrypted ON patients(email_encrypted) WHERE email_encrypted IS NOT NULL;",
                "CREATE INDEX IF NOT EXISTS idx_doctors_email_encrypted ON doctors(email_encrypted) WHERE email_encrypted IS NOT NULL;",
                "CREATE INDEX IF NOT EXISTS idx_medical_records_diagnosis_encrypted ON medical_records(diagnosis_encrypted) WHERE diagnosis_encrypted IS NOT NULL;",
            ]
            
            for command in index_commands:
                try:
                    cursor.execute(command)
                    print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–∑–¥–∞–Ω: {e}")
            
            conn.commit()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        raise


def test_tde():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TDE"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TDE")
    print("=" * 60)
    
    tde = TDEManager()
    
    # –¢–µ—Å—Ç 1: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:")
    
    test_cases = [
        ('patients', 'phone', '+7 (999) 123-45-67'),
        ('patients', 'email', '—Ç–µ—Å—Ç@example.com'),
        ('patients', 'address', '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 10'),
        ('medical_records', 'diagnosis', '–û—Å—Ç—Ä—ã–π –±—Ä–æ–Ω—Ö–∏—Ç —Å –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è–º–∏'),
        ('medical_records', 'complaints', '–ö–∞—à–µ–ª—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 38.5¬∞C, —Å–ª–∞–±–æ—Å—Ç—å'),
    ]
    
    for table, field, test_data in test_cases:
        ciphertext, iv = tde.encrypt_field(table, field, test_data)
        decrypted = tde.decrypt_field(table, field, ciphertext, iv)
        
        print(f"  üìù {table}.{field}:")
        print(f"     –ò—Å—Ö–æ–¥–Ω–æ: {test_data}")
        print(f"     –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {len(ciphertext)} –±–∞–π—Ç")
        print(f"     –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted}")
        print(f"     –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {'‚úÖ' if test_data == decrypted else '‚ùå'}")
    
    # –¢–µ—Å—Ç 2: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª—ã—Ö –∑–∞–ø–∏—Å–µ–π
    print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:")
    
    test_patient = {
        'first_name': '–ò–≤–∞–Ω',
        'last_name': '–¢–µ—Å—Ç–æ–≤',
        'phone': '+7 (999) 888-77-66',
        'email': 'ivan.testov@example.com',
        'address': '–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –ù–µ–≤—Å–∫–∏–π, –¥. 100'
    }
    
    encrypted_patient = tde.encrypt_record('patients', test_patient)
    decrypted_patient = tde.decrypt_record('patients', encrypted_patient)
    
    print(f"  üìã –ü–∞—Ü–∏–µ–Ω—Ç:")
    print(f"     –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–ø–∏—Å—å: {test_patient}")
    print(f"     –ü–æ—Å–ª–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {list(encrypted_patient.keys())}")
    print(f"     –ü–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {decrypted_patient}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    assert test_patient['first_name'] == decrypted_patient['first_name']
    assert test_patient['last_name'] == decrypted_patient['last_name']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    assert test_patient['phone'] == decrypted_patient['phone']
    assert test_patient['email'] == decrypted_patient['email']
    assert test_patient['address'] == decrypted_patient['address']
    
    print(f"  ‚úÖ –í—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã!")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print(f"\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    
    import time
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    start_time = time.time()
    for i in range(1000):
        test_text = f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä {i} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        ciphertext, iv = tde.encrypt_field('patients', 'address', test_text)
        decrypted = tde.decrypt_field('patients', 'address', ciphertext, iv)
    
    end_time = time.time()
    operations_per_second = 2000 / (end_time - start_time)  # 2000 –æ–ø–µ—Ä–∞—Ü–∏–π (1000 —à–∏—Ñ—Ä + 1000 —Ä–∞—Å—à–∏—Ñ—Ä)
    
    print(f"  ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {operations_per_second:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
    print(f"  ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 1000 —Ü–∏–∫–ª–æ–≤: {(end_time - start_time):.2f}—Å")
    
    # –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
    print(f"\n4Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TDE:")
    info = tde.get_encryption_info()
    for key, value in info.items():
        if key != 'table_details':
            print(f"   {key}: {value}")
    
    print(f"\nüìã –î–µ—Ç–∞–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:")
    for table, details in info['table_details'].items():
        print(f"   üìä {table}:")
        print(f"      –ü–æ–ª—è: {', '.join(details['fields'])}")
        print(f"      –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {details['sensitivity']}")
    
    print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ TDE –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    return True


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
def enable_tde_for_existing_connection():
    """–í–∫–ª—é—á–µ–Ω–∏–µ TDE –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è TDE —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        from src.database.connection import db
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_params = db.connection_params.copy()
        
        # –°–æ–∑–¥–∞–µ–º TDE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        tde_connection = TDEDatabaseConnection(connection_params)
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –æ–±—ä–µ–∫—Ç–µ
        original_get_connection = db.get_connection
        original_get_cursor = db.get_cursor
        
        db.get_connection = tde_connection.get_connection
        db.get_cursor = tde_connection.get_cursor
        db.tde_enabled = True
        db.tde_manager = tde_connection.tde
        
        print("‚úÖ TDE —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TDE
        def get_tde_info():
            return tde_connection.tde.get_encryption_info()
        
        def rotate_keys():
            return tde_connection.tde.key_manager.rotate_master_key()
        
        db.get_tde_info = get_tde_info
        db.rotate_tde_keys = rotate_keys
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TDE: {e}")
        return False


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è TDE
class TDEAdmin:
    """–£—Ç–∏–ª–∏—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è TDE"""
    
    def __init__(self):
        self.tde = TDEManager()
    
    def migrate_existing_data(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ TDE"""
        print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–• –ü–û–î TDE")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ!")
        
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ 'MIGRATE' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
        if confirm != 'MIGRATE':
            print("üõë –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
        
        from src.database.connection import db
        
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=RealDictCursor)
                
                total_migrated = 0
                
                for table_name, config in self.tde.encryption_config.items():
                    fields_to_encrypt = config['fields']
                    
                    print(f"\nüìã –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                    cursor.execute(f"SELECT * FROM {table_name}")
                    records = cursor.fetchall()
                    
                    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π")
                    
                    migrated_count = 0
                    
                    for record in records:
                        record_dict = dict(record)
                        record_id = record_dict.get('id')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
                        needs_migration = False
                        for field in fields_to_encrypt:
                            encrypted_field = f"{field}_encrypted"
                            if field in record_dict and record_dict[field] and not record_dict.get(encrypted_field):
                                needs_migration = True
                                break
                        
                        if not needs_migration:
                            continue
                        
                        # –®–∏—Ñ—Ä—É–µ–º –ø–æ–ª—è
                        update_fields = []
                        update_values = []
                        
                        for field in fields_to_encrypt:
                            if field in record_dict and record_dict[field]:
                                value = str(record_dict[field])
                                
                                ciphertext, iv = self.tde.encrypt_field(table_name, field, value)
                                
                                update_fields.append(f"{field}_encrypted = %s, {field}_iv = %s")
                                update_values.extend([ciphertext, iv])
                        
                        if update_fields:
                            update_query = f"""
                                UPDATE {table_name} 
                                SET {', '.join(update_fields)}
                                WHERE id = %s
                            """
                            update_values.append(record_id)
                            
                            cursor.execute(update_query, update_values)
                            migrated_count += 1
                    
                    conn.commit()
                    total_migrated += migrated_count
                    print(f"   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –∑–∞–ø–∏—Å–µ–π")
                
                print(f"\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
                print(f"   –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_migrated} –∑–∞–ø–∏—Å–µ–π")
                print(f"   TDE –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def verify_encryption(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –®–ò–§–†–û–í–ê–ù–ò–Ø –í –ë–î")
        print("=" * 40)
        
        from src.database.connection import db
        
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=RealDictCursor)
                
                total_encrypted = 0
                total_records = 0
                
                for table_name, config in self.tde.encryption_config.items():
                    fields_to_check = config['fields']
                    
                    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}:")
                    
                    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                    cursor.execute(f"SELECT COUNT(*) as total FROM {table_name}")
                    table_total = cursor.fetchone()['total']
                    
                    # –°—á–∏—Ç–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    encrypted_conditions = []
                    for field in fields_to_check:
                        encrypted_conditions.append(f"{field}_encrypted IS NOT NULL")
                    
                    if encrypted_conditions:
                        cursor.execute(f"""
                            SELECT COUNT(*) as encrypted 
                            FROM {table_name} 
                            WHERE {' OR '.join(encrypted_conditions)}
                        """)
                        table_encrypted = cursor.fetchone()['encrypted']
                    else:
                        table_encrypted = 0
                    
                    encryption_percent = (table_encrypted / table_total * 100) if table_total > 0 else 0
                    
                    print(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {table_total}")
                    print(f"   üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {table_encrypted} ({encryption_percent:.1f}%)")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    for field in fields_to_check:
                        cursor.execute(f"""
                            SELECT COUNT(*) as field_encrypted 
                            FROM {table_name} 
                            WHERE {field}_encrypted IS NOT NULL
                        """)
                        field_encrypted = cursor.fetchone()['field_encrypted']
                        print(f"     üìù {field}: {field_encrypted} –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                    
                    total_encrypted += table_encrypted
                    total_records += table_total
                
                overall_percent = (total_encrypted / total_records * 100) if total_records > 0 else 0
                
                print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_records}")
                print(f"   –ó–∞–ø–∏—Å–µ–π —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º: {total_encrypted}")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {overall_percent:.1f}%")
                
                if overall_percent > 80:
                    print(f"   ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º!")
                elif overall_percent > 50:
                    print(f"   üëç –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º")
                else:
                    print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è")
                
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False
    
    def cleanup_unencrypted_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üßπ –û–ß–ò–°–¢–ö–ê –ù–ï–ó–ê–®–ò–§–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!")
        
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ 'CLEANUP' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
        if confirm != 'CLEANUP':
            print("üõë –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
        
        from src.database.connection import db
        
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                total_cleaned = 0
                
                for table_name, config in self.tde.encryption_config.items():
                    fields_to_clean = config['fields']
                    
                    print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
                    
                    for field in fields_to_clean:
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                        cursor.execute(f"""
                            UPDATE {table_name} 
                            SET {field} = NULL 
                            WHERE {field}_encrypted IS NOT NULL 
                            AND {field} IS NOT NULL
                        """)
                        
                        cleaned = cursor.rowcount
                        total_cleaned += cleaned
                        print(f"   üóëÔ∏è –û—á–∏—â–µ–Ω–æ {field}: {cleaned} –∑–∞–ø–∏—Å–µ–π")
                    
                    conn.commit()
                
                print(f"\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
                print(f"   –í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ –ø–æ–ª–µ–π: {total_cleaned}")
                print(f"   –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ")
                
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False


def main_tde_setup():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TDE"""
    print("üîí –ù–ê–°–¢–†–û–ô–ö–ê TRANSPARENT DATA ENCRYPTION (TDE)")
    print("=" * 60)
    
    try:
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ TDE –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        tde = TDEManager()
        print("‚úÖ TDE –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        print("\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
        upgrade_database_for_tde()
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        print("\n3Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...")
        if enable_tde_for_existing_connection():
            print("‚úÖ TDE –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TDE...")
        if test_tde():
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        print("\nüéâ TDE –ù–ê–°–¢–†–û–ï–ù –£–°–ü–ï–®–ù–û!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö: python -c \"from src.security.tde_complete import TDEAdmin; TDEAdmin().migrate_existing_data()\"")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: python -c \"from src.security.tde_complete import TDEAdmin; TDEAdmin().verify_encryption()\"") 
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python run.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TDE: {e}")
        return False


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TDE
    main_tde_setup()