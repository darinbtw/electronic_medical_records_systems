import psycopg2
from psycopg2.extras import RealDictCursor
from contextlib import contextmanager
import logging
import os
import sys

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
if sys.platform.startswith('win'):
    # –î–ª—è Windows —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É UTF-8
    os.system('chcp 65001 > nul')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è UTF-8
os.environ['PYTHONIOENCODING'] = 'utf-8'
os.environ['LANG'] = 'en_US.UTF-8'
os.environ['LC_ALL'] = 'en_US.UTF-8'

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))
sys.path.insert(0, project_root)

try:
    from src.config import Config
    config = Config()
except ImportError:
    from dotenv import load_dotenv
    load_dotenv()
    
    class SimpleConfig:
        DB_HOST = os.getenv('DB_HOST')
        DB_PORT = os.getenv('DB_PORT')
        DB_NAME = os.getenv('DB_NAME')
        DB_USER = os.getenv('DB_USER')
        DB_PASSWORD = os.getenv('DB_PASSWORD')
    
    config = SimpleConfig()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TDE —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
TDE_ENABLED = os.getenv('TDE_ENABLED', 'False').lower() == 'true'

if TDE_ENABLED:
    try:
        from src.security.tde import TDEDatabaseConnection, TDEManager
        print("üîí TDE –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError as e:
        print(f"‚ö†Ô∏è TDE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        TDE_ENABLED = False


class DatabaseConnection:
    def __init__(self):
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è UTF-8
        self.connection_params = {
            'host': config.DB_HOST,
            'port': int(config.DB_PORT) if config.DB_PORT else 5432,
            'database': config.DB_NAME,
            'user': config.DB_USER,
            'password': config.DB_PASSWORD or '',
            # –û–°–ù–û–í–ù–´–ï UTF-8 –ù–ê–°–¢–†–û–ô–ö–ò
            'client_encoding': 'UTF8',
            'options': '-c client_encoding=UTF8 -c timezone=UTC'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å UTF-8
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
        for handler in logging.root.handlers:
            if hasattr(handler, 'stream') and hasattr(handler.stream, 'reconfigure'):
                try:
                    handler.stream.reconfigure(encoding='utf-8')
                except:
                    pass
        
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TDE –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if TDE_ENABLED:
            self.tde_connection = TDEDatabaseConnection(self.connection_params)
            self.tde_manager = TDEManager()
            self.logger.info("üîí TDE –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            self.tde_connection = None
            self.tde_manager = None
            self.logger.info("üìñ TDE –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    
    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å UTF-8"""
        if TDE_ENABLED and self.tde_connection:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TDE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with self.tde_connection.get_connection() as conn:
                yield conn
        else:
            # –û–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å UTF-8
            conn = None
            try:
                conn = psycopg2.connect(**self.connection_params)
                
                # –ö–†–ò–¢–ò–ß–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UTF-8 –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                with conn.cursor() as cursor:
                    cursor.execute("SET client_encoding = 'UTF8'")
                    cursor.execute("SET standard_conforming_strings = on")
                    cursor.execute("SET timezone = 'UTC'")
                
                yield conn
                conn.commit()
            except Exception as e:
                if conn:
                    conn.rollback()
                self.logger.error(f"Database error: {e}")
                raise e
            finally:
                if conn:
                    conn.close()
    
    @contextmanager
    def get_cursor(self, cursor_factory=RealDictCursor):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞ –ë–î —Å UTF-8"""
        if TDE_ENABLED and self.tde_connection:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TDE –∫—É—Ä—Å–æ—Ä
            with self.tde_connection.get_cursor(cursor_factory) as cursor:
                yield cursor
        else:
            # –û–±—ã—á–Ω—ã–π –∫—É—Ä—Å–æ—Ä —Å UTF-8
            with self.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=cursor_factory)
                try:
                    yield cursor
                finally:
                    cursor.close()
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π UTF-8"""
        try:
            with self.get_cursor() as cursor:
                # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                cursor.execute("SELECT 1 as test")
                
                # –¢–µ—Å—Ç UTF-8 —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
                test_text = "–¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: –ø—Ä–∏–≤–µ—Ç –º–∏—Ä! üè•"
                cursor.execute("SELECT %s as test_utf8", (test_text,))
                result = cursor.fetchone()
                
                if result and result['test_utf8'] == test_text:
                    self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ UTF-8 —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return True
                else:
                    self.logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
                    return False
                    
        except Exception as e:
            self.logger.error(f"Connection test failed: {e}")
            return False
    
    def get_connection_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        info = {
            'host': self.connection_params['host'],
            'port': self.connection_params['port'],
            'database': self.connection_params['database'],
            'user': self.connection_params['user'],
            'client_encoding': self.connection_params['client_encoding'],
            'tde_enabled': TDE_ENABLED
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ
        try:
            with self.get_cursor() as cursor:
                cursor.execute("SHOW client_encoding")
                info['actual_encoding'] = cursor.fetchone()[0]
                
                cursor.execute("SHOW server_encoding")
                info['server_encoding'] = cursor.fetchone()[0]
                
                cursor.execute("SELECT version()")
                info['postgres_version'] = cursor.fetchone()[0]
                
        except Exception as e:
            info['encoding_error'] = str(e)
        
        if TDE_ENABLED and self.tde_manager:
            info['tde_info'] = self.tde_manager.get_encryption_info()
        
        return info
    
    def fix_encoding_if_needed(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
                cursor.execute("SHOW client_encoding")
                current_encoding = cursor.fetchone()[0]
                
                if current_encoding != 'UTF8':
                    self.logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {current_encoding}, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8
                    cursor.execute("SET client_encoding = 'UTF8'")
                    conn.commit()
                    
                    self.logger.info("‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ UTF-8")
                
                return True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def enable_tde_for_existing_data(self):
        """
        –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ TDE
        –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ!
        """
        if not TDE_ENABLED or not self.tde_manager:
            raise ValueError("TDE –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        self.logger.warning("üö® –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ü–û–î TDE")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
        from src.security.tde import upgrade_database_for_tde
        upgrade_database_for_tde()
        
        # –ó–∞—Ç–µ–º –º–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        tables_to_migrate = ['patients', 'doctors', 'medical_records', 'prescriptions']
        
        for table_name in tables_to_migrate:
            self._migrate_table_data(table_name)
        
        self.logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ TDE –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def _migrate_table_data(self, table_name: str):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        encrypted_fields = self.tde_manager.encrypted_fields.get(table_name, [])
        
        if not encrypted_fields:
            self.logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table_name}: –Ω–µ—Ç –ø–æ–ª–µ–π –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        self.logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {encrypted_fields}")
        
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor(cursor_factory=RealDictCursor)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                cursor.execute(f"SELECT * FROM {table_name}")
                records = cursor.fetchall()
                
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –≤ {table_name}")
                
                migrated_count = 0
                
                for record in records:
                    record_dict = dict(record)
                    record_id = record_dict.get('id')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
                    needs_migration = False
                    for field in encrypted_fields:
                        iv_field = f"{field}_iv"
                        if field in record_dict and record_dict[field] and not record_dict.get(iv_field):
                            needs_migration = True
                            break
                    
                    if not needs_migration:
                        continue
                    
                    # –®–∏—Ñ—Ä—É–µ–º –ø–æ–ª—è
                    update_fields = []
                    update_values = []
                    
                    for field in encrypted_fields:
                        if field in record_dict and record_dict[field]:
                            value = str(record_dict[field])
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
                            iv_field = f"{field}_iv"
                            if record_dict.get(iv_field):
                                continue  # –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
                            
                            ciphertext, iv = self.tde_manager.encrypt_field(table_name, field, value)
                            
                            update_fields.append(f"{field} = %s, {field}_iv = %s")
                            update_values.extend([ciphertext, iv])
                    
                    if update_fields:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                        update_query = f"""
                            UPDATE {table_name} 
                            SET {', '.join(update_fields)}
                            WHERE id = %s
                        """
                        update_values.append(record_id)
                        
                        cursor.execute(update_query, update_values)
                        migrated_count += 1
                
                conn.commit()
                self.logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –∑–∞–ø–∏—Å–µ–π")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {table_name}: {e}")
            raise


# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
db = DatabaseConnection()

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å UTF-8...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É Python
    print(f"üìä –ö–æ–¥–∏—Ä–æ–≤–∫–∞ Python: {sys.getdefaultencoding()}")
    print(f"üìä –ö–æ–¥–∏—Ä–æ–≤–∫–∞ stdout: {sys.stdout.encoding}")
    print(f"üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    
    connection_info = db.get_connection_info()
    print(f"\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    for key, value in connection_info.items():
        if key not in ['tde_info', 'postgres_version']:
            print(f"  {key}: {value}")
    
    if connection_info.get('postgres_version'):
        print(f"\nüìä PostgreSQL: {connection_info['postgres_version'][:50]}...")
    
    if connection_info.get('tde_info'):
        print("\nüîí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è TDE:")
        for key, value in connection_info['tde_info'].items():
            print(f"  {key}: {value}")
    
    try:
        print(f"\nüß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å UTF-8...")
        if db.test_connection():
            print("‚úÖ –£–°–ü–ï–•: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —Å UTF-8!")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            with db.get_cursor() as cursor:
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public'
                    ORDER BY table_name;
                """)
                tables = cursor.fetchall()
                
                if tables:
                    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                    for table in tables:
                        cursor.execute(f"SELECT COUNT(*) as count FROM {table['table_name']}")
                        count = cursor.fetchone()['count']
                        print(f"   - {table['table_name']}: {count} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                        if count > 0 and table['table_name'] in ['patients', 'doctors']:
                            cursor.execute(f"SELECT * FROM {table['table_name']} LIMIT 1")
                            sample = cursor.fetchone()
                            if sample and 'first_name' in sample:
                                print(f"     –ü—Ä–∏–º–µ—Ä: {sample['first_name']} {sample.get('last_name', '')}")
                    
                    # –¢–µ—Å—Ç TDE –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                    if TDE_ENABLED and db.tde_manager:
                        print("\nüîí –¢–µ—Å—Ç TDE —Å UTF-8...")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
                        test_patient = {
                            'first_name': '–¢–µ—Å—Ç',
                            'last_name': '–¢–µ—Å—Ç–æ–≤–∏—á',
                            'middle_name': '–¢–µ—Å—Ç–æ–≤—ã–π',
                            'birth_date': '1990-01-01',
                            'gender': 'M',
                            'phone': '+7 999 000-00-00',
                            'email': '—Ç–µ—Å—Ç@example.ru',
                            'address': '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 2'
                        }
                        
                        try:
                            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
                            cursor.execute("""
                                INSERT INTO patients 
                                (first_name, last_name, middle_name, birth_date, gender, phone, email, address)
                                VALUES (%(first_name)s, %(last_name)s, %(middle_name)s, %(birth_date)s, 
                                        %(gender)s, %(phone)s, %(email)s, %(address)s)
                                RETURNING id
                            """, test_patient)
                            
                            test_id = cursor.fetchone()['id']
                            print(f"‚úÖ TDE+UTF8 —Ç–µ—Å—Ç: –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID {test_id}")
                            
                            # –ß–∏—Ç–∞–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
                            cursor.execute("SELECT * FROM patients WHERE id = %s", (test_id,))
                            result = cursor.fetchone()
                            
                            if result:
                                print(f"‚úÖ TDE+UTF8 —Ç–µ—Å—Ç: –∑–∞–ø–∏—Å—å –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞")
                                print(f"   –ò–º—è: {result.get('first_name', 'N/A')}")
                                print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {result.get('phone', 'N/A')}")
                                print(f"   Email: {result.get('email', 'N/A')}")
                                print(f"   –ê–¥—Ä–µ—Å: {result.get('address', 'N/A')}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞
                                if (result['first_name'] == test_patient['first_name'] and 
                                    result['phone'] == test_patient['phone'] and
                                    result['email'] == test_patient['email'] and
                                    result['address'] == test_patient['address']):
                                    print("‚úÖ TDE+UTF8 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                                else:
                                    print("‚ùå TDE+UTF8: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                                    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π email: {test_patient['email']}")
                                    print(f"   –ü–æ–ª—É—á–µ–Ω–Ω—ã–π email: {result['email']}")
                            
                            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
                            cursor.execute("DELETE FROM patients WHERE id = %s", (test_id,))
                            print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                            
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ TDE+UTF8 —Ç–µ—Å—Ç–∞: {e}")
                
                else:
                    print("\n‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö:")
                    print("python fix_utf8_database.py")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            print("\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
            print("python fix_utf8_database.py")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("2. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ")
        print("3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞")
        print("\nüîß –†–µ—à–µ–Ω–∏–µ:")
        print("python fix_utf8_database.py")