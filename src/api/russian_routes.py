from flask import Flask, request, jsonify, send_file
from datetime import datetime
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))
sys.path.insert(0, project_root)

from src.database.connection import db
from src.security.encryption import AESEncryption
from src.api.validators import Validators
from src.config import config

app = Flask(__name__)
app.config['SECRET_KEY'] = config.SECRET_KEY
encryption = AESEncryption()

# –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å web_interface.html
from flask_cors import CORS
CORS(app)

def format_patient_data(patient):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    if not patient:
        return patient
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    formatted = dict(patient)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    if 'birth_date' in formatted and formatted['birth_date']:
        try:
            if isinstance(formatted['birth_date'], str):
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º
                birth_date = datetime.strptime(formatted['birth_date'], '%Y-%m-%d').date()
            else:
                birth_date = formatted['birth_date']
            formatted['birth_date'] = birth_date.strftime('%d.%m.%Y')
        except:
            pass
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    if 'phone' in formatted:
        phone = formatted['phone']
        if phone:
            digits = ''.join(filter(str.isdigit, phone))
            if len(digits) == 11 and digits.startswith('7'):
                formatted['phone'] = f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
            elif len(digits) == 11 and digits.startswith('8'):
                formatted['phone'] = f"8 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
        else:
            formatted['phone'] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º email
    if 'email' in formatted:
        if not formatted['email']:
            formatted['email'] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª
    if 'gender' in formatted:
        gender_map = {'M': '–ú—É–∂—Å–∫–æ–π', 'F': '–ñ–µ–Ω—Å–∫–∏–π'}
        formatted['gender'] = gender_map.get(formatted['gender'], formatted['gender'] or '–Ω–µ —É–∫–∞–∑–∞–Ω')
    
    return formatted

def format_datetime_russian(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if not dt:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    
    try:
        if isinstance(dt, str):
            dt = datetime.fromisoformat(dt.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y %H:%M')
    except:
        return str(dt)

# === –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ===
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    web_interface_path = os.path.join(project_root, 'web_interface.html')
    if os.path.exists(web_interface_path):
        return send_file(web_interface_path)
    else:
        return jsonify({
            'message': '–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –º–µ–¥–∫–∞—Ä—Ç API',
            'error': 'web_interface.html –Ω–µ –Ω–∞–π–¥–µ–Ω',
            'path': web_interface_path
        })

#–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å REST API
@app.route('/api')
def api_info():
    """–ü—Ä–æ—Å—Ç–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"""
    return jsonify({
        'title': 'üè• –°–∏—Å—Ç–µ–º–∞ –º–µ–¥–∫–∞—Ä—Ç - API',
        'version': '12.10.5',
        'url': 'http://localhost:8000',
        
        'endpoints': {
            'üìã –û–±—â–∏–µ': {
                'GET /': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)',
                'GET /api': '–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π',
                'GET /health': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã'
            },
            
            'üë• –ü–∞—Ü–∏–µ–Ω—Ç—ã': {
                'GET /api/patients': '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
                'GET /api/patients?page=2': '–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
                'GET /api/patients/123': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ —Å ID 123',
                'POST /api/patients': '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞'
            },
            
            'üîç –ü–æ–∏—Å–∫': {
                'GET /api/search?q=–ò–≤–∞–Ω–æ–≤': '–ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å —Ñ–∞–º–∏–ª–∏–µ–π –ò–≤–∞–Ω–æ–≤',
                'GET /api/search?type=doctors': '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π'
            },
            
            'üìÖ –ü—Ä–∏–µ–º—ã': {
                'GET /api/appointments': '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤',
                'GET /api/appointments?status=scheduled': '–¢–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
                'GET /api/appointments?status=completed': '–¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ',
                'POST /api/appointments': '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–µ–º'
            },
            
            'üìù –ú–µ–¥–∫–∞—Ä—Ç—ã': {
                'GET /api/medical-records': '–°–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π',
                'GET /api/medical-records/456': '–ú–µ–¥–∫–∞—Ä—Ç–∞ —Å ID 456 (—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π)',
                'POST /api/medical-records': '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–µ–¥–∫–∞—Ä—Ç—É'
            },
            
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': {
                'GET /api/statistics': '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã'
            }
        },
        
        '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã': {
            'page': '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1, 2, 3...)',
            'per_page': '–°–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (20, 50, 100)',
            'q': '–ß—Ç–æ –∏—Å–∫–∞—Ç—å (–º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã)',
            'status': 'scheduled (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω), completed (–∑–∞–≤–µ—Ä—à–µ–Ω), cancelled (–æ—Ç–º–µ–Ω–µ–Ω)'
        },
        
        '–ø—Ä–∏–º–µ—Ä—ã_—Å–æ–∑–¥–∞–Ω–∏—è': {
            '–Ω–æ–≤—ã–π_–ø–∞—Ü–∏–µ–Ω—Ç': {
                'url': 'POST /api/patients',
                '–¥–∞–Ω–Ω—ã–µ': {
                    'first_name': '–ò–≤–∞–Ω',
                    'last_name': '–ü–µ—Ç—Ä–æ–≤', 
                    'birth_date': '1990-05-15',
                    'gender': 'M',
                    'phone': '+7 999 123-45-67',
                    'email': 'ivan@mail.ru'
                }
            },
            
            '–Ω–æ–≤—ã–π_–ø—Ä–∏–µ–º': {
                'url': 'POST /api/appointments',
                '–¥–∞–Ω–Ω—ã–µ': {
                    'patient_id': 1,
                    'doctor_id': 2,
                    'appointment_date': '2024-12-25T10:00:00'
                }
            }
        },
        
        '—Ñ–æ—Ä–º–∞—Ç—ã': {
            '–¥–∞—Ç–∞': 'YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25)',
            '–≤—Ä–µ–º—è': 'YYYY-MM-DDTHH:MM:SS (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25T14:30:00)',
            '–ø–æ–ª': 'M (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ F (–∂–µ–Ω—Å–∫–∏–π)',
            '—Ç–µ–ª–µ—Ñ–æ–Ω': '–õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: +7, 8, —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –±–µ–∑'
        },
        
        '–æ—Ç–≤–µ—Ç—ã': {
            '—É—Å–ø–µ—Ö': '200 - –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω',
            '—Å–æ–∑–¥–∞–Ω–æ': '201 - –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞',
            '–æ—à–∏–±–∫–∞': '400 - –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
            '–Ω–µ_–Ω–∞–π–¥–µ–Ω–æ': '404 - –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        },
        
        '–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏': [
            'üîí –î–∏–∞–≥–Ω–æ–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è',
            'üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∫—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è',
            'üá∑üá∫ –î–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
            'üìÑ –í—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é',
            'üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é'
        ]
    })

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        with db.get_cursor() as cursor:
            cursor.execute("SELECT COUNT(*) as patients FROM patients")
            patients_count = cursor.fetchone()['patients']
            
            cursor.execute("SELECT COUNT(*) as doctors FROM doctors")
            doctors_count = cursor.fetchone()['doctors']
            
        return jsonify({
            'status': 'OK',
            'database': 'OK',
            'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
            'details': {
                'patients_count': patients_count,
                'doctors_count': doctors_count
            }
        })
    except Exception as e:
        return jsonify({
            'status': 'ERROR',
            'database': 'ERROR',
            'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
            'details': {'error': str(e)}
        })

# === –ü–û–ò–°–ö –ü–ê–¶–ò–ï–ù–¢–û–í ===

@app.route('/api/search')
def search():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ä—É—Å—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    query = request.args.get('q', '').strip()
    search_type = request.args.get('type', 'patients')
    
    if search_type == 'doctors':
        try:
            with db.get_cursor() as cursor:
                cursor.execute("""
                    SELECT id, first_name, last_name, middle_name, 
                           specialization, phone, email
                    FROM doctors
                    ORDER BY last_name, first_name
                """)
                doctors = cursor.fetchall()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞—á–∞
                formatted_doctors = []
                for doctor in doctors:
                    formatted = dict(doctor)
                    if formatted['phone']:
                        digits = ''.join(filter(str.isdigit, formatted['phone']))
                        if len(digits) == 11:
                            formatted['phone'] = f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
                    else:
                        formatted['phone'] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
                    
                    if not formatted['email']:
                        formatted['email'] = "–Ω–µ —É–∫–∞–∑–∞–Ω"
                    
                    formatted_doctors.append(formatted)
                
                return jsonify({'doctors': formatted_doctors})
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    # –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    if len(query) < 2:
        return jsonify({'error': '–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π', 'patients': []}), 200
    
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT id, first_name, last_name, middle_name, 
                       birth_date, gender, phone, email
                FROM patients
                WHERE last_name ILIKE %s 
                   OR first_name ILIKE %s 
                   OR middle_name ILIKE %s
                   OR phone LIKE %s
                ORDER BY last_name, first_name
                LIMIT 50
            """, (f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%'))
            
            patients = cursor.fetchall()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            formatted_patients = [format_patient_data(patient) for patient in patients]
            
        return jsonify({
            'patients': formatted_patients,
            'count': len(formatted_patients),
            'query': query
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# === –ü–ê–¶–ò–ï–ù–¢–´ ===

@app.route('/api/patients', methods=['GET'])
def get_patients():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 20))
    offset = (page - 1) * per_page
    
    try:
        with db.get_cursor() as cursor:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor.execute("SELECT COUNT(*) as total FROM patients")
            total = cursor.fetchone()['total']
            
            # –ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            cursor.execute("""
                SELECT id, first_name, last_name, middle_name, 
                       birth_date, gender, phone, email
                FROM patients
                ORDER BY last_name, first_name
                LIMIT %s OFFSET %s
            """, (per_page, offset))
            
            patients = cursor.fetchall()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            formatted_patients = [format_patient_data(patient) for patient in patients]
            
            return jsonify({
                'patients': formatted_patients,
                'pagination': {
                    'page': page,
                    'per_page': per_page,
                    'total': total,
                    'pages': (total + per_page - 1) // per_page
                }
            })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/patients/<int:patient_id>', methods=['GET'])
def get_patient(patient_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ ID —Å —Ä—É—Å—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT p.*, 
                       COUNT(DISTINCT a.id) as total_appointments,
                       MAX(a.appointment_date) as last_appointment
                FROM patients p
                LEFT JOIN appointments a ON p.id = a.patient_id
                WHERE p.id = %s
                GROUP BY p.id
            """, (patient_id,))
            
            patient = cursor.fetchone()
            
            if not patient:
                return jsonify({'error': '–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            formatted_patient = format_patient_data(patient)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞
            if formatted_patient['last_appointment']:
                formatted_patient['last_appointment'] = format_datetime_russian(
                    formatted_patient['last_appointment']
                )
            else:
                formatted_patient['last_appointment'] = "–Ω–µ—Ç"
                
            return jsonify(formatted_patient)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# === –ü–†–ò–ï–ú–´ ===

@app.route('/api/appointments', methods=['GET'])
def get_appointments():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 20))
    status_filter = request.args.get('status', '')
    offset = (page - 1) * per_page
    
    try:
        with db.get_cursor() as cursor:
            # –°—Ç—Ä–æ–∏–º WHERE —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
            where_clause = ""
            params = []
            
            if status_filter:
                where_clause = "WHERE a.status = %s"
                params.append(status_filter)
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
            count_query = f"""
                SELECT COUNT(*) as total 
                FROM appointments a
                JOIN patients p ON a.patient_id = p.id
                JOIN doctors d ON a.doctor_id = d.id
                {where_clause}
            """
            cursor.execute(count_query, params)
            total = cursor.fetchone()['total']
            
            # –ü—Ä–∏–µ–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
            main_query = f"""
                SELECT a.*, 
                       p.first_name || ' ' || p.last_name as patient_name,
                       d.first_name || ' ' || d.last_name as doctor_name,
                       d.specialization
                FROM appointments a
                JOIN patients p ON a.patient_id = p.id
                JOIN doctors d ON a.doctor_id = d.id
                {where_clause}
                ORDER BY a.appointment_date DESC
                LIMIT %s OFFSET %s
            """
            
            cursor.execute(main_query, params + [per_page, offset])
            appointments = cursor.fetchall()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º
            formatted_appointments = []
            for appointment in appointments:
                formatted = dict(appointment)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
                formatted['appointment_date'] = format_datetime_russian(
                    formatted['appointment_date']
                )
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
                status_map = {
                    'scheduled': '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
                    'completed': '–∑–∞–≤–µ—Ä—à–µ–Ω', 
                    'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω'
                }
                formatted['status'] = status_map.get(
                    formatted['status'], formatted['status']
                )
                
                formatted_appointments.append(formatted)
            
            return jsonify({
                'appointments': formatted_appointments,
                'pagination': {
                    'page': page,
                    'per_page': per_page,
                    'total': total,
                    'pages': (total + per_page - 1) // per_page if total > 0 else 1
                }
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
@app.route('/api/statistics', methods=['GET'])
def get_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        with db.get_cursor() as cursor:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("""
                SELECT 
                    (SELECT COUNT(*) FROM patients) as total_patients,
                    (SELECT COUNT(*) FROM doctors) as total_doctors,
                    (SELECT COUNT(*) FROM appointments) as total_appointments,
                    (SELECT COUNT(*) FROM appointments WHERE status = 'scheduled') as scheduled_appointments,
                    (SELECT COUNT(*) FROM medical_records) as total_records
            """)
            general_stats = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–∞—á–∞–º
            cursor.execute("""
                SELECT d.id, d.first_name, d.last_name, d.specialization,
                       COUNT(a.id) as appointment_count
                FROM doctors d
                LEFT JOIN appointments a ON d.id = a.doctor_id
                GROUP BY d.id, d.first_name, d.last_name, d.specialization
                ORDER BY appointment_count DESC
            """)
            doctors_stats = cursor.fetchall()
            
            return jsonify({
                'general': dict(general_stats),
                'doctors': [dict(doc) for doc in doctors_stats]
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –º–µ–¥–∫–∞—Ä—Ç) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö

@app.route('/api/patients', methods=['POST'])
def create_patient():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    data = request.get_json()
    
    required = ['first_name', 'last_name', 'birth_date', 'gender']
    for field in required:
        if field not in data:
            return jsonify({'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}'}), 400
    
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                INSERT INTO patients 
                (first_name, last_name, middle_name, birth_date, 
                 gender, phone, email, address)
                VALUES (%(first_name)s, %(last_name)s, %(middle_name)s, 
                        %(birth_date)s, %(gender)s, %(phone)s, %(email)s, %(address)s)
                RETURNING id, created_at
            """, data)
            
            result = cursor.fetchone()
            return jsonify({
                'id': result['id'],
                'created_at': format_datetime_russian(result['created_at']),
                'message': '–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
            }), 201
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {str(e)}'}), 500

@app.route('/api/appointments', methods=['GET'])
def get_appointments_paginated():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 20))
    status_filter = request.args.get('status', '')
    offset = (page - 1) * per_page
    
    try:
        with db.get_cursor() as cursor:
            # –°—Ç—Ä–æ–∏–º WHERE —É—Å–ª–æ–≤–∏–µ
            where_clause = ""
            params = []
            
            if status_filter:
                where_clause = "WHERE a.status = %s"
                params.append(status_filter)
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            count_query = f"""
                SELECT COUNT(*) as total 
                FROM appointments a
                JOIN patients p ON a.patient_id = p.id
                JOIN doctors d ON a.doctor_id = d.id
                {where_clause}
            """
            cursor.execute(count_query, params)
            total = cursor.fetchone()['total']
            
            # –ü—Ä–∏–µ–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            main_query = f"""
                SELECT a.*, 
                       p.first_name || ' ' || p.last_name as patient_name,
                       d.first_name || ' ' || d.last_name as doctor_name,
                       d.specialization
                FROM appointments a
                JOIN patients p ON a.patient_id = p.id
                JOIN doctors d ON a.doctor_id = d.id
                {where_clause}
                ORDER BY a.appointment_date DESC
                LIMIT %s OFFSET %s
            """
            
            cursor.execute(main_query, params + [per_page, offset])
            appointments = cursor.fetchall()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º
            formatted_appointments = []
            for appointment in appointments:
                formatted = dict(appointment)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
                formatted['appointment_date'] = format_datetime_russian(
                    formatted['appointment_date']
                )
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
                status_map = {
                    'scheduled': '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
                    'completed': '–∑–∞–≤–µ—Ä—à–µ–Ω', 
                    'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω'
                }
                formatted['status'] = status_map.get(
                    formatted['status'], formatted['status']
                )
                
                formatted_appointments.append(formatted)
            
            return jsonify({
                'appointments': formatted_appointments,
                'pagination': {
                    'page': page,
                    'per_page': per_page,
                    'total': total,
                    'pages': (total + per_page - 1) // per_page
                }
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    
@app.route('/api/appointments-without-records', methods=['GET'])
def get_appointments_without_records():
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã –±–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                SELECT a.*, 
                       p.first_name || ' ' || p.last_name as patient_name,
                       d.first_name || ' ' || d.last_name as doctor_name,
                       d.specialization
                FROM appointments a
                JOIN patients p ON a.patient_id = p.id
                JOIN doctors d ON a.doctor_id = d.id
                LEFT JOIN medical_records mr ON a.id = mr.appointment_id
                WHERE a.status = 'completed' 
                AND mr.id IS NULL
                ORDER BY a.appointment_date DESC
                LIMIT 100
            """)
            
            appointments = cursor.fetchall()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º
            formatted_appointments = []
            for appointment in appointments:
                formatted = dict(appointment)
                formatted['appointment_date'] = format_datetime_russian(
                    formatted['appointment_date']
                )
                formatted_appointments.append(formatted)
            
            return jsonify({
                'appointments': formatted_appointments,
                'count': len(formatted_appointments)
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/medical-records', methods=['GET'])
def get_medical_records_paginated():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 20))
    offset = (page - 1) * per_page
    
    try:
        with db.get_cursor() as cursor:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor.execute("SELECT COUNT(*) as total FROM medical_records")
            total = cursor.fetchone()['total']
            
            # –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            cursor.execute("""
                SELECT mr.*, 
                       a.appointment_date,
                       p.first_name || ' ' || p.last_name as patient_name,
                       d.first_name || ' ' || d.last_name as doctor_name
                FROM medical_records mr
                JOIN appointments a ON mr.appointment_id = a.id
                JOIN patients p ON a.patient_id = p.id
                JOIN doctors d ON a.doctor_id = d.id
                ORDER BY mr.created_at DESC
                LIMIT %s OFFSET %s
            """, (per_page, offset))
            
            records = cursor.fetchall()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∏–∞–≥–Ω–æ–∑–∞)
            formatted_records = []
            for record in records:
                formatted = dict(record)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞
                formatted['appointment_date'] = format_datetime_russian(
                    formatted['appointment_date']
                )
                
                # –£–¥–∞–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                if 'diagnosis_encrypted' in formatted:
                    del formatted['diagnosis_encrypted']
                if 'diagnosis_iv' in formatted:
                    del formatted['diagnosis_iv']
                
                formatted_records.append(formatted)
            
            return jsonify({
                'records': formatted_records,
                'pagination': {
                    'page': page,
                    'per_page': per_page,
                    'total': total,
                    'pages': (total + per_page - 1) // per_page if total > 0 else 1
                }
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/medical-records/<int:record_id>', methods=['GET'])
def get_medical_record_with_decryption(record_id):
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∑–∞–ø–∏—Å—å —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –¥–∏–∞–≥–Ω–æ–∑–∞"""
    try:
        with db.get_cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
            cursor.execute("""
                SELECT mr.*, a.appointment_date,
                       p.first_name || ' ' || p.last_name as patient_name,
                       d.first_name || ' ' || d.last_name as doctor_name
                FROM medical_records mr
                JOIN appointments a ON mr.appointment_id = a.id
                JOIN patients p ON a.patient_id = p.id
                JOIN doctors d ON a.doctor_id = d.id
                WHERE mr.id = %s
            """, (record_id,))
            
            record = cursor.fetchone()
            
            if not record:
                return jsonify({'error': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            formatted_record = dict(record)
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ–∑
            if record['diagnosis_encrypted'] and record['diagnosis_iv']:
                try:
                    decrypted = encryption.decrypt(
                        bytes(record['diagnosis_encrypted']),
                        bytes(record['diagnosis_iv'])
                    )
                    formatted_record['diagnosis'] = decrypted
                except Exception as e:
                    formatted_record['diagnosis'] = f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}"
            else:
                formatted_record['diagnosis'] = "–î–∏–∞–≥–Ω–æ–∑ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω"
            
            # –£–¥–∞–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del formatted_record['diagnosis_encrypted']
            del formatted_record['diagnosis_iv']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            formatted_record['appointment_date'] = format_datetime_russian(
                formatted_record['appointment_date']
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            cursor.execute("""
                SELECT * FROM prescriptions 
                WHERE medical_record_id = %s
                ORDER BY id
            """, (record_id,))
            
            formatted_record['prescriptions'] = cursor.fetchall()
            
            return jsonify(formatted_record)
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/appointments', methods=['POST'])
def create_appointment():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–µ–º"""
    data = request.get_json()
    
    required = ['patient_id', 'doctor_id', 'appointment_date']
    for field in required:
        if field not in data:
            return jsonify({'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}'}), 400
    
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                INSERT INTO appointments 
                (patient_id, doctor_id, appointment_date, status)
                VALUES (%s, %s, %s, %s)
                RETURNING id, created_at
            """, (
                data['patient_id'],
                data['doctor_id'],
                data['appointment_date'],
                data.get('status', 'scheduled')
            ))
            
            result = cursor.fetchone()
            
            return jsonify({
                'id': result['id'],
                'created_at': format_datetime_russian(result['created_at']),
                'message': '–ü—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
            }), 201
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞: {str(e)}'}), 500

@app.route('/api/medical-records', methods=['POST'])
def create_medical_record():
    """–°–æ–∑–¥–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∑–∞–ø–∏—Å—å —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∏–∞–≥–Ω–æ–∑–æ–º"""
    data = request.get_json()
    
    required = ['appointment_id', 'diagnosis']
    for field in required:
        if field not in data:
            return jsonify({'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}'}), 400
    
    try:
        # –®–∏—Ñ—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ–∑
        encrypted_diagnosis, iv = encryption.encrypt(data['diagnosis'])
        
        with db.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
            cursor.execute("""
                SELECT id, status FROM appointments 
                WHERE id = %s
            """, (data['appointment_id'],))
            
            appointment = cursor.fetchone()
            if not appointment:
                return jsonify({'error': '–ü—Ä–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
            cursor.execute("""
                SELECT id FROM medical_records 
                WHERE appointment_id = %s
            """, (data['appointment_id'],))
            
            existing_record = cursor.fetchone()
            if existing_record:
                return jsonify({'error': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–µ–º–∞ –Ω–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω"
            cursor.execute("""
                UPDATE appointments 
                SET status = 'completed' 
                WHERE id = %s
            """, (data['appointment_id'],))
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            cursor.execute("""
                INSERT INTO medical_records 
                (appointment_id, diagnosis_encrypted, diagnosis_iv, 
                 complaints, examination_results)
                VALUES (%s, %s, %s, %s, %s)
                RETURNING id, created_at
            """, (
                data['appointment_id'],
                encrypted_diagnosis,
                iv,
                data.get('complaints'),
                data.get('examination_results')
            ))
            
            result = cursor.fetchone()
            record_id = result['id']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            if 'prescriptions' in data and data['prescriptions']:
                for prescription in data['prescriptions']:
                    if prescription.get('medication_name'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
                        cursor.execute("""
                            INSERT INTO prescriptions 
                            (medical_record_id, medication_name, dosage, 
                             frequency, duration, notes)
                            VALUES (%s, %s, %s, %s, %s, %s)
                        """, (
                            record_id,
                            prescription['medication_name'],
                            prescription.get('dosage'),
                            prescription.get('frequency'),
                            prescription.get('duration'),
                            prescription.get('notes')
                        ))
            
            return jsonify({
                'id': record_id,
                'created_at': format_datetime_russian(result['created_at']),
                'message': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
            }), 201
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∫–∞—Ä—Ç—ã: {str(e)}'}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000, debug=True)