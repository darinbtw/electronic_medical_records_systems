"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TDE —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫
"""

import os
import sys
import json
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def safe_tde_setup():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TDE"""
    print("üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê TDE")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã
    tde_files = ['.tde_master_key', '.encryption_key']
    for tde_file in tde_files:
        if os.path.exists(tde_file):
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª {tde_file}")
            choice = input(f"–£–¥–∞–ª–∏—Ç—å {tde_file}? (y/n): ").lower()
            if choice == 'y':
                os.remove(tde_file)
                print(f"üóëÔ∏è –§–∞–π–ª {tde_file} —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª {tde_file} –æ—Å—Ç–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞!")
    
    # –í–∫–ª—é—á–∞–µ–º TDE –≤ .env
    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            env_content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º TDE_ENABLED –Ω–∞ True
        env_content = env_content.replace('TDE_ENABLED=False', 'TDE_ENABLED=True')
        
        # –î–æ–±–∞–≤–ª—è–µ–º TDE –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'TDE_MASTER_KEY_FILE' not in env_content:
            env_content += """

# TDE Settings (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
TDE_ENABLED=True
TDE_MASTER_KEY_FILE=.tde_master_key
TDE_KEY_ROTATION_DAYS=90
TDE_BACKUP_KEYS=True
"""
        
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print("‚úÖ TDE –≤–∫–ª—é—á–µ–Ω –≤ .env")
    
    # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TDE
    try:
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TDE...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['TDE_ENABLED'] = 'True'
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TDE –º–æ–¥—É–ª—å
        sys.path.insert(0, '.')
        from src.security.tde import TDEManager
        
        # –°–æ–∑–¥–∞–µ–º TDE –º–µ–Ω–µ–¥–∂–µ—Ä (–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏)
        tde = TDEManager()
        print("‚úÖ TDE –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = tde.get_encryption_info()
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è TDE:")
        print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º: {info['algorithm']}")
        print(f"   –ì–ª–∞–≤–Ω—ã–π –∫–ª—é—á: {'‚úÖ' if info['master_key_exists'] else '‚ùå'}")
        print(f"   –¢–∞–±–ª–∏—Ü –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {len(info['encrypted_tables'])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TDE: {e}")
        print("\nüîß –†–µ—à–µ–Ω–∏–µ: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ë–ï–ó TDE")
        print("   TDE_ENABLED=False –≤ .env")
        return False

if __name__ == "__main__":
    safe_tde_setup()
