# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: windows_utf8_fix.py

import os
import sys
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv

# –ö–†–ò–¢–ò–ß–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Windows –¥–ª—è UTF-8
if sys.platform.startswith('win'):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É UTF-8
    os.system('chcp 65001 > nul')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Windows
    os.environ['PYTHONLEGACYWINDOWSSTDIO'] = '0'
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout –∏ stderr –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å UTF-8
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    sys.stdin = codecs.getreader('utf-8')(sys.stdin.detach())

print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï UTF-8 –î–õ–Ø WINDOWS")
print("=" * 50)

def load_env_safe():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    try:
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å UTF-8
        load_dotenv(encoding='utf-8')
        return True
    except UnicodeDecodeError:
        try:
            # –ü—Ä–æ–±—É–µ–º —Å cp1251 (Windows –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
            load_dotenv(encoding='cp1251')
            print("‚ö†Ô∏è .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ cp1251")
            return True
        except:
            try:
                # –ü—Ä–æ–±—É–µ–º —Å latin-1
                load_dotenv(encoding='latin-1')
                print("‚ö†Ô∏è .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ latin-1")
                return True
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env: {e}")
                return False

def get_db_params():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    
    if not load_env_safe():
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    params = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': int(os.getenv('DB_PORT', 5432)),
        'database': os.getenv('DB_NAME', 'medical_records'),
        'user': os.getenv('DB_USER', 'postgres'),
        'password': os.getenv('DB_PASSWORD', ''),
        # –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è UTF-8
        'client_encoding': 'UTF8',
        'options': '-c client_encoding=UTF8'
    }
    
    print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print(f"   –•–æ—Å—Ç: {params['host']}:{params['port']}")
    print(f"   –ë–î: {params['database']}")
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {params['user']}")
    print(f"   –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {params['client_encoding']}")
    
    return params

def test_basic_connection():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    try:
        params = get_db_params()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î postgres
        test_params = params.copy()
        test_params['database'] = 'postgres'
        
        conn = psycopg2.connect(**test_params)
        cursor = conn.cursor()
        
        cursor.execute("SELECT version()")
        version = cursor.fetchone()[0]
        print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {version[:50]}...")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def recreate_database_python():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î —á–µ—Ä–µ–∑ Python (–±–µ–∑ psql)"""
    print("\n2Ô∏è‚É£ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î —Å UTF-8 —á–µ—Ä–µ–∑ Python...")
    
    try:
        params = get_db_params()
        db_name = params['database']
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
        system_params = params.copy()
        system_params['database'] = 'postgres'
        
        conn = psycopg2.connect(**system_params)
        conn.autocommit = True
        cursor = conn.cursor()
        
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ë–î {db_name}...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        cursor.execute("""
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname = %s AND pid <> pg_backend_pid()
        """, (db_name,))
        
        # –£–¥–∞–ª—è–µ–º –ë–î
        cursor.execute(f'DROP DATABASE IF EXISTS "{db_name}"')
        print(f"‚úÖ –ë–î {db_name} —É–¥–∞–ª–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ë–î —Å UTF-8
        print(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ë–î {db_name} —Å UTF-8...")
        cursor.execute(f'''
            CREATE DATABASE "{db_name}"
            WITH 
            ENCODING = 'UTF8'
            LC_COLLATE = 'C'
            LC_CTYPE = 'C'
            TEMPLATE = template0
        ''')
        
        print(f"‚úÖ –ë–î {db_name} —Å–æ–∑–¥–∞–Ω–∞ —Å UTF-8")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        return False

def create_tables_python():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Python"""
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ Python...")
    
    create_tables_sql = """
    -- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    SET client_encoding = 'UTF8';
    SET standard_conforming_strings = on;
    
    -- –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    CREATE TABLE IF NOT EXISTS patients (
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        middle_name VARCHAR(100),
        birth_date DATE NOT NULL,
        gender CHAR(1) CHECK (gender IN ('M', 'F')),
        phone VARCHAR(20),
        email VARCHAR(100) UNIQUE,
        address TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–∞—á–µ–π
    CREATE TABLE IF NOT EXISTS doctors(
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        middle_name VARCHAR(100),
        specialization VARCHAR(200) NOT NULL,
        license_number VARCHAR(50) UNIQUE NOT NULL,
        phone VARCHAR(20),
        email VARCHAR(100) UNIQUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–µ–º–æ–≤
    CREATE TABLE IF NOT EXISTS appointments(
        id SERIAL PRIMARY KEY,
        patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
        doctor_id INTEGER NOT NULL REFERENCES doctors(id) ON DELETE RESTRICT,
        appointment_date TIMESTAMP NOT NULL,
        status VARCHAR(20) DEFAULT 'scheduled' CHECK (status IN ('scheduled', 'completed', 'cancelled')),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT unique_appointment UNIQUE (patient_id, doctor_id, appointment_date)
    );

    -- –¢–∞–±–ª–∏—Ü–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
    CREATE TABLE IF NOT EXISTS medical_records(
        id SERIAL PRIMARY KEY,
        appointment_id INTEGER NOT NULL REFERENCES appointments(id),
        diagnosis_encrypted BYTEA,
        diagnosis_iv BYTEA,
        complaints TEXT,
        examination_results TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
    );

    -- –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
    CREATE TABLE IF NOT EXISTS prescriptions(
        id SERIAL PRIMARY KEY,
        medical_record_id INTEGER NOT NULL REFERENCES medical_records(id),
        medication_name VARCHAR(200) NOT NULL,
        dosage VARCHAR(100),
        frequency VARCHAR(100),
        duration VARCHAR(100),
        notes TEXT
    );
    
    -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã patients
    DROP TRIGGER IF EXISTS update_patients_updated_at ON patients;
    CREATE TRIGGER update_patients_updated_at 
        BEFORE UPDATE ON patients 
        FOR EACH ROW 
        EXECUTE FUNCTION update_updated_at_column();
    
    -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    CREATE INDEX IF NOT EXISTS idx_patients_name ON patients(last_name, first_name);
    CREATE INDEX IF NOT EXISTS idx_patients_birth_date ON patients(birth_date);
    CREATE INDEX IF NOT EXISTS idx_appointments_date ON appointments(appointment_date);
    CREATE INDEX IF NOT EXISTS idx_appointments_patient ON appointments(patient_id);
    CREATE INDEX IF NOT EXISTS idx_appointments_doctor ON appointments(doctor_id);
    """
    
    try:
        params = get_db_params()
        conn = psycopg2.connect(**params)
        cursor = conn.cursor()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute(create_tables_sql)
        conn.commit()
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def insert_test_data_python():
    """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Python"""
    print("\n4Ô∏è‚É£ –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π...")
    
    try:
        params = get_db_params()
        conn = psycopg2.connect(**params)
        cursor = conn.cursor()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å–µ—Å—Å–∏–∏
        cursor.execute("SET client_encoding = 'UTF8'")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã
        patients_data = [
            ('–ò–≤–∞–Ω', '–ò–≤–∞–Ω–æ–≤', '–ò–≤–∞–Ω–æ–≤–∏—á', '1985-03-15', 'M', '+79001234567', 'ivanov@mail.ru', '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1'),
            ('–ú–∞—Ä–∏—è', '–ü–µ—Ç—Ä–æ–≤–∞', '–°–µ—Ä–≥–µ–µ–≤–Ω–∞', '1990-07-22', 'F', '+79001234568', 'petrova@mail.ru', '–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 2'),
            ('–ê–ª–µ–∫—Å–µ–π', '–°–∏–¥–æ—Ä–æ–≤', '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á', '1992-11-03', 'M', '+79001234569', 'sidorov@mail.ru', '–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. 3'),
            ('–ï–ª–µ–Ω–∞', '–ö–æ–∑–ª–æ–≤–∞', '–ê–Ω–¥—Ä–µ–µ–≤–Ω–∞', '1988-05-17', 'F', '+79001234570', 'kozlova@yandex.ru', '–≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ø—Ä. –õ–µ–Ω–∏–Ω–∞, –¥. 10'),
            ('–î–º–∏—Ç—Ä–∏–π', '–°–º–∏—Ä–Ω–æ–≤', '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á', '1975-12-01', 'M', '+79001234571', 'smirnov@gmail.com', '–≥. –ö–∞–∑–∞–Ω—å, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 5')
        ]
        
        for patient in patients_data:
            cursor.execute("""
                INSERT INTO patients (first_name, last_name, middle_name, birth_date, gender, phone, email, address) 
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """, patient)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤—Ä–∞—á–∏
        doctors_data = [
            ('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–æ–∫—Ç–æ—Ä–æ–≤', '–ü–µ—Ç—Ä–æ–≤–∏—á', '–¢–µ—Ä–∞–ø–µ–≤—Ç', '–õ–ò–¶-2024-0001', '+79101234567', 'doktorov@clinic.ru'),
            ('–û–ª—å–≥–∞', '–õ–µ—á–µ–±–Ω–∞—è', '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', '–õ–ò–¶-2024-0002', '+79101234568', 'lechebnaya@clinic.ru'),
            ('–°–µ—Ä–≥–µ–π', '–•–∏—Ä—É—Ä–≥–æ–≤', '–ò–≤–∞–Ω–æ–≤–∏—á', '–•–∏—Ä—É—Ä–≥', '–õ–ò–¶-2024-0003', '+79101234569', 'hirurgov@clinic.ru'),
            ('–ù–∞—Ç–∞–ª—å—è', '–ù–µ–≤—Ä–æ–ª–æ–≥–æ–≤–∞', '–°–µ—Ä–≥–µ–µ–≤–Ω–∞', '–ù–µ–≤—Ä–æ–ª–æ–≥', '–õ–ò–¶-2024-0004', '+79101234570', 'nevrologova@clinic.ru')
        ]
        
        for doctor in doctors_data:
            cursor.execute("""
                INSERT INTO doctors (first_name, last_name, middle_name, specialization, license_number, phone, email) 
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, doctor)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–µ–º—ã
        appointments_data = [
            (1, 1, '2024-01-15 10:00:00', 'completed'),
            (2, 2, '2024-01-16 14:30:00', 'completed'),
            (3, 3, '2024-01-17 09:00:00', 'completed'),
            (4, 4, '2024-01-18 15:00:00', 'scheduled'),
            (5, 1, '2024-01-19 11:00:00', 'scheduled')
        ]
        
        for appointment in appointments_data:
            cursor.execute("""
                INSERT INTO appointments (patient_id, doctor_id, appointment_date, status) 
                VALUES (%s, %s, %s, %s)
            """, appointment)
        
        conn.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏
        cursor.execute("SELECT first_name, last_name FROM patients LIMIT 3")
        patients = cursor.fetchall()
        
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        for patient in patients:
            print(f"   {patient[0]} {patient[1]}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_utf8_final():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç UTF-8"""
    print("\n5Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç UTF-8...")
    
    try:
        params = get_db_params()
        conn = psycopg2.connect(**params)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        cursor.execute("SHOW client_encoding")
        encoding = cursor.fetchone()[0]
        print(f"üìä –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {encoding}")
        
        # –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        test_text = "–¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: –ø—Ä–∏–≤–µ—Ç –º–∏—Ä! üè•"
        cursor.execute("SELECT %s as test_text", (test_text,))
        result = cursor.fetchone()['test_text']
        
        print(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {test_text}")
        print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ: {result}")
        
        if test_text == result:
            print("‚úÖ UTF-8 —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT COUNT(*) as patients FROM patients")
            patients_count = cursor.fetchone()['patients']
            
            cursor.execute("SELECT COUNT(*) as doctors FROM doctors")
            doctors_count = cursor.fetchone()['doctors']
            
            print(f"üìä –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –ë–î: {patients_count}")
            print(f"üìä –í—Ä–∞—á–µ–π –≤ –ë–î: {doctors_count}")
            
            cursor.close()
            conn.close()
            return True
        else:
            print("‚ùå UTF-8 —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

def fix_connection_file():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\n6Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    connection_file = 'src/database/connection.py'
    
    if not os.path.exists(connection_file):
        print(f"‚ö†Ô∏è –§–∞–π–ª {connection_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
        content = None
        encodings = ['utf-8', 'cp1251', 'latin-1']
        
        for encoding in encodings:
            try:
                with open(connection_file, 'r', encoding=encoding) as f:
                    content = f.read()
                print(f"üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ: {encoding}")
                break
            except UnicodeDecodeError:
                continue
        
        if not content:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ UTF-8 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if "'client_encoding': 'UTF8'" in content:
            print("‚úÖ UTF-8 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –µ—Å—Ç—å")
            return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º UTF-8 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if "'client_encoding'" not in content:
            content = content.replace(
                "self.connection_params = {",
                """self.connection_params = {
            'client_encoding': 'UTF8',
            'options': '-c client_encoding=UTF8',"""
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTF-8
        with open(connection_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ –§–∞–π–ª connection.py –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    steps = [
        ("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", test_basic_connection),
        ("–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î", recreate_database_python),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", create_tables_python),
        ("–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö", insert_test_data_python),
        ("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç", test_utf8_final),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", fix_connection_file)
    ]
    
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        try:
            if not step_func():
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ: {step_name}")
                
                if step_name == "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è":
                    print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
                    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
                    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ .env —Ñ–∞–π–ª–µ")
                    print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ pgAdmin")
                    return False
                else:
                    choice = input(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (y/n): ").lower()
                    if choice != 'y':
                        return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —à–∞–≥–µ {step_name}: {e}")
            choice = input(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower()
            if choice != 'y':
                return False
    
    print(f"\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –° UTF-8 –ò–°–ü–†–ê–í–õ–ï–ù–´!")
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —Å UTF-8")
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ Python")
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    print(f"‚úÖ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"‚úÖ –§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        
        if success:
            print(f"\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏—Å—Ç–µ–º—É:")
            print(f"   python run.py")
            
            choice = input(f"\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–µ–π—á–∞—Å? (y/n): ").lower()
            if choice == 'y':
                print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
                os.system("python run.py")
        else:
            print(f"\n‚ùå –ù–µ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã")
            
        input(f"\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        
    except KeyboardInterrupt:
        print(f"\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")