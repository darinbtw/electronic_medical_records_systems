import os
import sys
from dotenv import load_dotenv

load_dotenv()

def test_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===")
    
    required_vars = ['DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_USER', 'DB_PASSWORD']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: –ù–ï –ù–ê–ô–î–ï–ù–ê")
            missing_vars.append(var)
    
    return len(missing_vars) == 0

def test_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ===")
    
    try:
        import psycopg2
        from psycopg2.extras import RealDictCursor
        
        connection_params = {
            'host': os.getenv('DB_HOST'),
            'port': os.getenv('DB_PORT'),
            'database': os.getenv('DB_NAME'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD')
        }
        
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {connection_params['host']}:{connection_params['port']}")
        print(f"–ë–∞–∑–∞: {connection_params['database']}")
        
        conn = psycopg2.connect(**connection_params)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚úÖ PostgreSQL: {version['version'][:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' ORDER BY table_name;
        """)
        
        tables = cursor.fetchall()
        if tables:
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {len(tables)}")
            for table in tables:
                cursor.execute(f"SELECT COUNT(*) as count FROM {table['table_name']}")
                count = cursor.fetchone()['count']
                print(f"   - {table['table_name']}: {count} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö:")
            print("   python src/database/create_table.py")
        
        cursor.close()
        conn.close()
        return True
        
    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install psycopg2-binary")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–• –ö–ê–†–¢")
    print("=" * 50)
    
    checks = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection)
    ]
    
    results = []
    for name, func in checks:
        try:
            result = func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {name}: {e}")
            results.append(False)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(results)}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if all(results):
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. python src/database/create_table.py  # —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
        print("2. psql -d medical_records -f src/sql_test_query/basic_test_data.sql  # –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("3. python src/main.py  # –∑–∞–ø—É—Å—Ç–∏—Ç—å API")
    else:
        print("‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
    
    return all(results)

if __name__ == "__main__":
    success = main()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter...")
    sys.exit(0 if success else 1)