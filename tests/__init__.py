"""
–ú–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–∞—Ä—Ç

–°–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
- –¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
- –¢–µ—Å—Ç—ã API endpoints  
- –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (SQL injection, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ)
- –¢–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    from tests import BaseTestCase, create_test_data
    
    class TestPatients(BaseTestCase):
        def setUp(self):
            super().setUp()
            self.test_data = create_test_data()
"""

import os
import sys
import unittest
import tempfile
from datetime import datetime, date
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
current_dir = Path(__file__).parent
project_root = current_dir.parent
sys.path.insert(0, str(project_root))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
TEST_CONFIG = {
    'database': {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': int(os.getenv('DB_PORT', 5432)),
        'name': os.getenv('DB_NAME', 'medical_records'),
        'user': os.getenv('DB_USER', 'postgres'), 
        'password': os.getenv('DB_PASSWORD', ''),
        'test_prefix': 'test_'
    },
    'api': {
        'base_url': 'http://localhost:8000',
        'timeout': 30
    },
    'security': {
        'test_encryption': True,
        'test_sql_injection': True
    }
}

class BaseTestCase(unittest.TestCase):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–µ–¥–∫–∞—Ä—Ç
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
    """
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –∫–ª–∞—Å—Å–µ"""
        cls.project_root = project_root
        cls.test_config = TEST_CONFIG
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        try:
            from src.database.connection import db
            cls.db = db
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not cls.db.test_connection():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î")
                
        except ImportError as e:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ë–î: {e}")
            cls.db = None
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.start_time = datetime.now()
        self.test_name = self._testMethodName
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.temp_dir = tempfile.mkdtemp(prefix='medical_tests_')
        
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {self.test_name}")
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        end_time = datetime.now()
        duration = (end_time - self.start_time).total_seconds()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        import shutil
        try:
            shutil.rmtree(self.temp_dir)
        except:
            pass
        
        print(f"‚úÖ –¢–µ—Å—Ç {self.test_name} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f}—Å")
    
    def assert_valid_patient_data(self, patient_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        required_fields = ['first_name', 'last_name', 'birth_date', 'gender']
        
        for field in required_fields:
            self.assertIn(field, patient_data, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            self.assertIsNotNone(patient_data[field], f"–ü–æ–ª–µ {field} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∞
        self.assertIn(patient_data['gender'], ['M', 'F'], "–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å M –∏–ª–∏ F")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        if isinstance(patient_data['birth_date'], str):
            try:
                birth_date = datetime.strptime(patient_data['birth_date'], '%Y-%m-%d').date()
            except ValueError:
                self.fail("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è")
        else:
            birth_date = patient_data['birth_date']
        
        self.assertLessEqual(birth_date, date.today(), "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
        self.assertGreaterEqual(birth_date, date(1900, 1, 1), "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è")
    
    def assert_valid_doctor_data(self, doctor_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞"""
        required_fields = ['first_name', 'last_name', 'specialization', 'license_number']
        
        for field in required_fields:
            self.assertIn(field, doctor_data, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            self.assertIsNotNone(doctor_data[field], f"–ü–æ–ª–µ {field} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
        license_number = doctor_data['license_number']
        import re
        valid_license = re.match(r'^(–õ–ò–¶-\d{4}-\d{4}|LIC-\d{4}-\d{3,4})$', license_number)
        self.assertTrue(valid_license, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏: {license_number}")
    
    def execute_sql_safely(self, query, params=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        if not self.db:
            self.skipTest("–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        try:
            with self.db.get_cursor() as cursor:
                cursor.execute(query, params)
                return cursor.fetchall()
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {e}")

def create_test_data():
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    """
    return {
        'patients': [
            {
                'first_name': '–¢–µ—Å—Ç',
                'last_name': '–ü–∞—Ü–∏–µ–Ω—Ç–æ–≤',
                'middle_name': '–¢–µ—Å—Ç–æ–≤–∏—á',
                'birth_date': '1990-01-15',
                'gender': 'M',
                'phone': '+7 (999) 111-11-11',
                'email': 'test.patient@example.com',
                'address': '–≥. –¢–µ—Å—Ç–æ–≤—ã–π, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1'
            },
            {
                'first_name': '–¢–µ—Å—Ç–æ–≤–∞—è',
                'last_name': '–ü–∞—Ü–∏–µ–Ω—Ç–æ–≤–∞', 
                'middle_name': '–¢–µ—Å—Ç–æ–≤–Ω–∞',
                'birth_date': '1985-05-20',
                'gender': 'F',
                'phone': '+7 (999) 222-22-22',
                'email': 'test.patient2@example.com',
                'address': '–≥. –¢–µ—Å—Ç–æ–≤—ã–π, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 2'
            }
        ],
        'doctors': [
            {
                'first_name': '–¢–µ—Å—Ç',
                'last_name': '–î–æ–∫—Ç–æ—Ä–æ–≤',
                'middle_name': '–¢–µ—Å—Ç–æ–≤–∏—á',
                'specialization': '–¢–µ—Ä–∞–ø–µ–≤—Ç',
                'license_number': '–õ–ò–¶-2024-9999',
                'phone': '+7 (999) 333-33-33',
                'email': 'test.doctor@clinic.com'
            },
            {
                'first_name': '–¢–µ—Å—Ç–æ–≤–∞—è',
                'last_name': '–î–æ–∫—Ç–æ—Ä–æ–≤–∞',
                'middle_name': '–¢–µ—Å—Ç–æ–≤–Ω–∞', 
                'specialization': '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
                'license_number': '–õ–ò–¶-2024-8888',
                'phone': '+7 (999) 444-44-44',
                'email': 'test.doctor2@clinic.com'
            }
        ],
        'appointments': [
            {
                'patient_id': 1,
                'doctor_id': 1,
                'appointment_date': '2024-07-01T10:00:00',
                'status': 'scheduled'
            },
            {
                'patient_id': 2,
                'doctor_id': 2, 
                'appointment_date': '2024-07-01T14:00:00',
                'status': 'completed'
            }
        ],
        'medical_records': [
            {
                'appointment_id': 2,  # –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤
                'complaints': '–¢–µ—Å—Ç–æ–≤—ã–µ –∂–∞–ª–æ–±—ã',
                'examination_results': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–º–æ—Ç—Ä–∞',
                'diagnosis': '–¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑'
            }
        ],
        'prescriptions': [
            {
                'medical_record_id': 1,
                'medication_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç',
                'dosage': '500–º–≥',
                'frequency': '2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å',
                'duration': '5 –¥–Ω–µ–π',
                'notes': '–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏'
            }
        ]
    }

def create_sql_injection_test_cases():
    """
    –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SQL injection
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    """
    return [
        "' OR '1'='1",
        "'; DROP TABLE patients; --",
        "' UNION SELECT * FROM doctors --",
        "admin'--",
        "' OR 1=1 --",
        "'; INSERT INTO patients VALUES (999,'hack','hack','1990-01-01','M'); --",
        "test@mail.ru'; --",
        "—Ç–µ—Å—Ç' OR '—Ö'='—Ö",  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
        "test\n' OR '1'='1",  # –° –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
    ]

def run_all_tests():
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ –º–æ–¥—É–ª–µ
    
    Returns:
        unittest.TestResult: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –ò—â–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
    test_loader = unittest.TestLoader()
    test_suite = test_loader.discover(
        start_dir=str(current_dir),
        pattern='test_*.py',
        top_level_dir=str(project_root)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    return runner.run(test_suite)

def setup_test_database():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.database.connection import db
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not db.test_connection():
            raise Exception("–û—Å–Ω–æ–≤–Ω–∞—è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {e}")
        return False

def cleanup_test_data():
    """
    –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    """
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.database.connection import db
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ email/phone –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º)
            test_patterns = [
                "DELETE FROM prescriptions WHERE medical_record_id IN (SELECT id FROM medical_records WHERE appointment_id IN (SELECT id FROM appointments WHERE patient_id IN (SELECT id FROM patients WHERE email LIKE '%test%' OR email LIKE '%—Ç–µ—Å—Ç%')))",
                "DELETE FROM medical_records WHERE appointment_id IN (SELECT id FROM appointments WHERE patient_id IN (SELECT id FROM patients WHERE email LIKE '%test%' OR email LIKE '%—Ç–µ—Å—Ç%'))",
                "DELETE FROM appointments WHERE patient_id IN (SELECT id FROM patients WHERE email LIKE '%test%' OR email LIKE '%—Ç–µ—Å—Ç%')",
                "DELETE FROM patients WHERE email LIKE '%test%' OR email LIKE '%—Ç–µ—Å—Ç%'",
                "DELETE FROM doctors WHERE email LIKE '%test%' OR email LIKE '%—Ç–µ—Å—Ç%'"
            ]
            
            for query in test_patterns:
                try:
                    cursor.execute(query)
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
            
            conn.commit()
            
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    'BaseTestCase',
    'TEST_CONFIG', 
    'create_test_data',
    'create_sql_injection_test_cases',
    'run_all_tests',
    'setup_test_database',
    'cleanup_test_data'
]

# –í–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
__version__ = '12.10.5'

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ != '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
    try:
        import dotenv
        from pathlib import Path
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_file = project_root / '.env'
        if env_file.exists():
            dotenv.load_dotenv(env_file)
            
    except ImportError:
        pass  # dotenv –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤