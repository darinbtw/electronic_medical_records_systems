# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: quick_utf8_fix.py

import os
import sys
import subprocess
from dotenv import load_dotenv

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 —Å—Ä–∞–∑—É
if sys.platform.startswith('win'):
    os.system('chcp 65001 > nul')

os.environ['PYTHONIOENCODING'] = 'utf-8'

def quick_fix():
    """–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å UTF-8 –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π"""
    
    print("‚ö° –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï UTF-8 –ü–†–û–ë–õ–ï–ú")
    print("=" * 50)
    
    load_dotenv()
    
    db_name = os.getenv('DB_NAME', 'medical_records')
    db_user = os.getenv('DB_USER', 'postgres')
    db_host = os.getenv('DB_HOST', 'localhost')
    db_port = os.getenv('DB_PORT', '5432')
    
    print(f"üéØ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_name}")
    print(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_user}")
    print(f"üéØ –•–æ—Å—Ç: {db_host}:{db_port}")
    
    # 1. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î —Å UTF-8 —á–µ—Ä–µ–∑ psql
    print(f"\n1Ô∏è‚É£ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î —Å UTF-8...")
    
    try:
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ë–î
        commands = [
            f'psql -h {db_host} -p {db_port} -U {db_user} -d postgres -c "DROP DATABASE IF EXISTS {db_name};"',
            f'psql -h {db_host} -p {db_port} -U {db_user} -d postgres -c "CREATE DATABASE {db_name} WITH ENCODING=\'UTF8\' LC_COLLATE=\'C\' LC_CTYPE=\'C\' TEMPLATE=template0;"'
        ]
        
        for cmd in commands:
            print(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}")
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
                
        print("‚úÖ –ë–î –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å UTF-8")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        print("\nüìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:")
        print(f"psql -U {db_user} -c \"DROP DATABASE IF EXISTS {db_name};\"")
        print(f"psql -U {db_user} -c \"CREATE DATABASE {db_name} WITH ENCODING='UTF8' LC_COLLATE='C' LC_CTYPE='C' TEMPLATE=template0;\"")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQL —Ñ–∞–π–ª
    print(f"\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    
    # –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    create_tables_sql = """-- -*- coding: utf-8 -*-
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

-- –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
CREATE TABLE IF NOT EXISTS patients (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    middle_name VARCHAR(100),
    birth_date DATE NOT NULL,
    gender CHAR(1) CHECK (gender IN ('M', 'F')),
    phone VARCHAR(20),
    email VARCHAR(100) UNIQUE,
    address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–∞—á–µ–π
CREATE TABLE IF NOT EXISTS doctors(
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    middle_name VARCHAR(100),
    specialization VARCHAR(200) NOT NULL,
    license_number VARCHAR(50) UNIQUE NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(100) UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–µ–º–æ–≤
CREATE TABLE IF NOT EXISTS appointments(
    id SERIAL PRIMARY KEY,
    patient_id INTEGER NOT NULL REFERENCES patients(id) ON DELETE CASCADE,
    doctor_id INTEGER NOT NULL REFERENCES doctors(id) ON DELETE RESTRICT,
    appointment_date TIMESTAMP NOT NULL,
    status VARCHAR(20) DEFAULT 'scheduled' CHECK (status IN ('scheduled', 'completed', 'cancelled')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_appointment UNIQUE (patient_id, doctor_id, appointment_date)
);

-- –¢–∞–±–ª–∏—Ü–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
CREATE TABLE IF NOT EXISTS medical_records(
    id SERIAL PRIMARY KEY,
    appointment_id INTEGER NOT NULL REFERENCES appointments(id),
    diagnosis_encrypted BYTEA,
    diagnosis_iv BYTEA,
    complaints TEXT,
    examination_results TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
);

-- –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
CREATE TABLE IF NOT EXISTS prescriptions(
    id SERIAL PRIMARY KEY,
    medical_record_id INTEGER NOT NULL REFERENCES medical_records(id),
    medication_name VARCHAR(200) NOT NULL,
    dosage VARCHAR(100),
    frequency VARCHAR(100),
    duration VARCHAR(100),
    notes TEXT
);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã patients
DROP TRIGGER IF EXISTS update_patients_updated_at ON patients;
CREATE TRIGGER update_patients_updated_at 
    BEFORE UPDATE ON patients 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_patients_name ON patients(last_name, first_name);
CREATE INDEX IF NOT EXISTS idx_patients_birth_date ON patients(birth_date);
CREATE INDEX IF NOT EXISTS idx_appointments_date ON appointments(appointment_date);
CREATE INDEX IF NOT EXISTS idx_appointments_patient ON appointments(patient_id);
CREATE INDEX IF NOT EXISTS idx_appointments_doctor ON appointments(doctor_id);
"""
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL —Ñ–∞–π–ª
        with open('temp_create_tables.sql', 'w', encoding='utf-8') as f:
            f.write(create_tables_sql)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Ñ–∞–π–ª
        cmd = f'psql -h {db_host} -p {db_port} -U {db_user} -d {db_name} -f temp_create_tables.sql'
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {result.stderr}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove('temp_create_tables.sql')
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    # 3. –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\n3Ô∏è‚É£ –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    test_data_sql = """-- -*- coding: utf-8 -*-
SET client_encoding = 'UTF8';

-- –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã
INSERT INTO patients (first_name, last_name, middle_name, birth_date, gender, phone, email, address) VALUES
('–ò–≤–∞–Ω', '–ò–≤–∞–Ω–æ–≤', '–ò–≤–∞–Ω–æ–≤–∏—á', '1985-03-15', 'M', '+79001234567', 'ivanov@mail.ru', '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1'),
('–ú–∞—Ä–∏—è', '–ü–µ—Ç—Ä–æ–≤–∞', '–°–µ—Ä–≥–µ–µ–≤–Ω–∞', '1990-07-22', 'F', '+79001234568', 'petrova@mail.ru', '–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 2'),
('–ê–ª–µ–∫—Å–µ–π', '–°–∏–¥–æ—Ä–æ–≤', '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á', '1992-11-03', 'M', '+79001234569', 'sidorov@mail.ru', '–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. 3'),
('–ï–ª–µ–Ω–∞', '–ö–æ–∑–ª–æ–≤–∞', '–ê–Ω–¥—Ä–µ–µ–≤–Ω–∞', '1988-05-17', 'F', '+79001234570', 'kozlova@yandex.ru', '–≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ø—Ä. –õ–µ–Ω–∏–Ω–∞, –¥. 10'),
('–î–º–∏—Ç—Ä–∏–π', '–°–º–∏—Ä–Ω–æ–≤', '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á', '1975-12-01', 'M', '+79001234571', 'smirnov@gmail.com', '–≥. –ö–∞–∑–∞–Ω—å, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 5');

-- –¢–µ—Å—Ç–æ–≤—ã–µ –≤—Ä–∞—á–∏
INSERT INTO doctors (first_name, last_name, middle_name, specialization, license_number, phone, email) VALUES
('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–æ–∫—Ç–æ—Ä–æ–≤', '–ü–µ—Ç—Ä–æ–≤–∏—á', '–¢–µ—Ä–∞–ø–µ–≤—Ç', '–õ–ò–¶-2024-0001', '+79101234567', 'doktorov@clinic.ru'),
('–û–ª—å–≥–∞', '–õ–µ—á–µ–±–Ω–∞—è', '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', '–õ–ò–¶-2024-0002', '+79101234568', 'lechebnaya@clinic.ru'),
('–°–µ—Ä–≥–µ–π', '–•–∏—Ä—É—Ä–≥–æ–≤', '–ò–≤–∞–Ω–æ–≤–∏—á', '–•–∏—Ä—É—Ä–≥', '–õ–ò–¶-2024-0003', '+79101234569', 'hirurgov@clinic.ru'),
('–ù–∞—Ç–∞–ª—å—è', '–ù–µ–≤—Ä–æ–ª–æ–≥–æ–≤–∞', '–°–µ—Ä–≥–µ–µ–≤–Ω–∞', '–ù–µ–≤—Ä–æ–ª–æ–≥', '–õ–ò–¶-2024-0004', '+79101234570', 'nevrologova@clinic.ru');

-- –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–µ–º—ã
INSERT INTO appointments (patient_id, doctor_id, appointment_date, status) VALUES
(1, 1, '2024-01-15 10:00:00', 'completed'),
(2, 2, '2024-01-16 14:30:00', 'completed'),
(3, 3, '2024-01-17 09:00:00', 'completed'),
(4, 4, '2024-01-18 15:00:00', 'scheduled'),
(5, 1, '2024-01-19 11:00:00', 'scheduled');
"""
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        with open('temp_test_data.sql', 'w', encoding='utf-8') as f:
            f.write(test_data_sql)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Ñ–∞–π–ª
        cmd = f'psql -h {db_host} -p {db_port} -U {db_user} -d {db_name} -f temp_test_data.sql'
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {result.stderr}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove('temp_test_data.sql')
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\n4Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Python
        import psycopg2
        from psycopg2.extras import RealDictCursor
        
        conn_params = {
            'host': db_host,
            'port': int(db_port),
            'database': db_name,
            'user': db_user,
            'password': os.getenv('DB_PASSWORD', ''),
            'client_encoding': 'UTF8'
        }
        
        conn = psycopg2.connect(**conn_params)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        cursor.execute("SHOW client_encoding")
        encoding = cursor.fetchone()[0]
        print(f"üìä –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {encoding}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) as patients FROM patients")
        patients_count = cursor.fetchone()['patients']
        
        cursor.execute("SELECT COUNT(*) as doctors FROM doctors")
        doctors_count = cursor.fetchone()['doctors']
        
        print(f"üìä –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤: {patients_count}")
        print(f"üìä –í—Ä–∞—á–µ–π: {doctors_count}")
        
        # –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        cursor.execute("SELECT first_name, last_name FROM patients LIMIT 1")
        patient = cursor.fetchone()
        
        if patient:
            print(f"üìä –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: {patient['first_name']} {patient['last_name']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ —á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            if '–ò–≤–∞–Ω' in patient['first_name'] or '–ú–∞—Ä–∏—è' in patient['first_name']:
                print("‚úÖ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π")
        
        cursor.close()
        conn.close()
        
        print(f"\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –° UTF-8 –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —Å UTF-8")
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print(f"‚úÖ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        print(f"\nüîß –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ:")
        print(f"1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –ë–î")
        print(f"2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print(f"3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å psycopg2: pip install psycopg2-binary")
        return False


def update_connection_file():
    """–û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è UTF-8"""
    print(f"\n5Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    connection_file = 'src/database/connection.py'
    
    if os.path.exists(connection_file):
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(connection_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ UTF-8 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if "'client_encoding': 'UTF8'" in content:
                print("‚úÖ connection.py —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è UTF-8")
                return True
            
            # –î–æ–±–∞–≤–ª—è–µ–º UTF-8 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if "'client_encoding'" not in content:
                content = content.replace(
                    "self.connection_params = {",
                    """self.connection_params = {
            'client_encoding': 'UTF8',
            'options': '-c client_encoding=UTF8',"""
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(connection_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ connection.py –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è UTF-8")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è connection.py: {e}")
            return False
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {connection_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UTF-8...")
    
    success = quick_fix()
    
    if success:
        update_connection_file()
        
        print(f"\nüöÄ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:")
        print(f"   python run.py")
        print(f"\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:")
        print(f"   http://localhost:8000")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
        choice = input(f"\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–µ–π—á–∞—Å? (y/n): ").lower()
        if choice == 'y':
            print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
            os.system("python run.py")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print(f"\nüìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print(f"1. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print(f"2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        print(f"3. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python fix_utf8_database.py")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")