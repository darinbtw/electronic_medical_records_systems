#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å TDE –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
current_dir = Path(__file__).parent
project_root = current_dir.parent if 'scripts' in str(current_dir) else current_dir
sys.path.insert(0, str(project_root))

def check_tde_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ TDE"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ TDE...")
    
    tde_enabled = os.getenv('TDE_ENABLED', 'False').lower() == 'true'
    print(f"TDE_ENABLED –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {tde_enabled}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    key_file = os.getenv('ENCRYPTION_KEY_FILE', '.encryption_key')
    key_exists = os.path.exists(key_file)
    print(f"–§–∞–π–ª –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ({key_file}): {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if key_exists else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    return tde_enabled, key_exists

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –¥–ª—è TDE"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
    
    try:
        from src.database.connection import db
        
        with db.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TDE –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ patients
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'patients' 
                AND column_name LIKE '%_encrypted'
                ORDER BY column_name
            """)
            
            encrypted_columns = [row['column_name'] for row in cursor.fetchall()]
            
            print(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ patients: {encrypted_columns}")
            
            expected_columns = ['address_encrypted', 'email_encrypted', 'phone_encrypted']
            missing_columns = [col for col in expected_columns if col not in encrypted_columns]
            
            if missing_columns:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_columns}")
                return False
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ TDE –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def run_migration():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è TDE –ø–æ–ª–µ–π"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ TDE...")
    
    try:
        from src.database.connection import db
        
        # –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_sql = """
        -- –î–æ–±–∞–≤–ª—è–µ–º TDE –ø–æ–ª—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã patients
        DO $$
        BEGIN
            -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'patients' AND column_name = 'phone_encrypted'
            ) THEN
                ALTER TABLE patients ADD COLUMN phone_encrypted BYTEA;
                RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü phone_encrypted';
            END IF;

            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'patients' AND column_name = 'phone_iv'
            ) THEN
                ALTER TABLE patients ADD COLUMN phone_iv BYTEA;
                RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü phone_iv';
            END IF;

            -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è email
            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'patients' AND column_name = 'email_encrypted'
            ) THEN
                ALTER TABLE patients ADD COLUMN email_encrypted BYTEA;
                RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü email_encrypted';
            END IF;

            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'patients' AND column_name = 'email_iv'
            ) THEN
                ALTER TABLE patients ADD COLUMN email_iv BYTEA;
                RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü email_iv';
            END IF;

            -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'patients' AND column_name = 'address_encrypted'
            ) THEN
                ALTER TABLE patients ADD COLUMN address_encrypted BYTEA;
                RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü address_encrypted';
            END IF;

            IF NOT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'patients' AND column_name = 'address_iv'
            ) THEN
                ALTER TABLE patients ADD COLUMN address_iv BYTEA;
                RAISE NOTICE '–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü address_iv';
            END IF;
        END $$;
        """
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(migration_sql)
            conn.commit()
            
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è TDE –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_patient_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å TDE"""
    print("\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å TDE...")
    
    try:
        from src.database.connection import db
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        test_patient = {
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–¢–µ—Å—Ç–æ–≤–∏—á',
            'middle_name': '–¢–µ—Å—Ç–æ–≤—ã–π',
            'birth_date': '1990-01-01',
            'gender': 'M',
            'phone': '+7 (999) 123-45-67',
            'email': 'test@example.com',
            'address': '–≥. –¢–µ—Å—Ç–æ–≤—ã–π, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ TDE
        tde_enabled = os.getenv('TDE_ENABLED', 'False').lower() == 'true'
        
        if tde_enabled:
            try:
                from src.security.tde import TDEManager
                tde_manager = TDEManager()
                
                # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                phone_encrypted, phone_iv = tde_manager.encrypt_field('patients', 'phone', test_patient['phone'])
                email_encrypted, email_iv = tde_manager.encrypt_field('patients', 'email', test_patient['email'])
                address_encrypted, address_iv = tde_manager.encrypt_field('patients', 'address', test_patient['address'])
                
                print("‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
                decrypted_phone = tde_manager.decrypt_field('patients', 'phone', phone_encrypted, phone_iv)
                decrypted_email = tde_manager.decrypt_field('patients', 'email', email_encrypted, email_iv)
                decrypted_address = tde_manager.decrypt_field('patients', 'address', address_encrypted, address_iv)
                
                if (decrypted_phone == test_patient['phone'] and 
                    decrypted_email == test_patient['email'] and 
                    decrypted_address == test_patient['address']):
                    print("‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                    return False
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –≤ –ë–î
                with db.get_cursor() as cursor:
                    cursor.execute("""
                        INSERT INTO patients 
                        (first_name, last_name, middle_name, birth_date, gender, 
                         phone_encrypted, phone_iv, email_encrypted, email_iv, 
                         address_encrypted, address_iv)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        RETURNING id
                    """, (
                        test_patient['first_name'],
                        test_patient['last_name'], 
                        test_patient['middle_name'],
                        test_patient['birth_date'],
                        test_patient['gender'],
                        phone_encrypted,
                        phone_iv,
                        email_encrypted,
                        email_iv,
                        address_encrypted,
                        address_iv
                    ))
                    
                    result = cursor.fetchone()
                    test_patient_id = result['id']
                    
                    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {test_patient_id}")
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    cursor.execute("DELETE FROM patients WHERE id = %s", (test_patient_id,))
                    print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
                    
                return True
                
            except ImportError:
                print("‚ùå –ú–æ–¥—É–ª—å TDE –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print("‚ÑπÔ∏è TDE –æ—Ç–∫–ª—é—á–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—É—é –≤—Å—Ç–∞–≤–∫—É...")
            
            with db.get_cursor() as cursor:
                cursor.execute("""
                    INSERT INTO patients 
                    (first_name, last_name, middle_name, birth_date, gender, phone, email, address)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    RETURNING id
                """, (
                    test_patient['first_name'],
                    test_patient['last_name'], 
                    test_patient['middle_name'],
                    test_patient['birth_date'],
                    test_patient['gender'],
                    test_patient['phone'],
                    test_patient['email'],
                    test_patient['address']
                ))
                
                result = cursor.fetchone()
                test_patient_id = result['id']
                
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {test_patient_id}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                cursor.execute("DELETE FROM patients WHERE id = %s", (test_patient_id,))
                print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
                
            return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def fix_env_file():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è TDE"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
    
    env_file = project_root / '.env'
    
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
    with open(env_file, 'r', encoding='utf-8') as f:
        env_content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TDE_ENABLED
    if 'TDE_ENABLED' not in env_content:
        print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º TDE_ENABLED –≤ .env")
        with open(env_file, 'a', encoding='utf-8') as f:
            f.write('\n# TDE Configuration\n')
            f.write('TDE_ENABLED=false\n')
            f.write('ENCRYPTION_KEY_FILE=.encryption_key\n')
        print("‚úÖ TDE –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env")
    else:
        print("‚úÖ TDE –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ .env")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TDE"""
    print("üîí –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú TDE")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ TDE
    tde_enabled, key_exists = check_tde_status()
    
    # –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    fix_env_file()
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
    db_ready = check_database_structure()
    
    # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not db_ready:
        print("\nüîÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è TDE, –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        if run_migration():
            db_ready = check_database_structure()
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if db_ready:
        test_success = test_patient_creation()
    else:
        test_success = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    print(f"TDE –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if tde_enabled else '‚ùå'}")
    print(f"–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {'‚úÖ' if key_exists else '‚ùå'}")
    print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î: {'‚úÖ' if db_ready else '‚ùå'}")
    print(f"–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {'‚úÖ' if test_success else '‚ùå'}")
    
    if tde_enabled and db_ready and test_success:
        print("\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å TDE")
    elif not tde_enabled and test_success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó TDE")
        print("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è TDE —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env: TDE_ENABLED=true")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
        
        if not db_ready:
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –ë–î: python scripts/tde_migration.sql")
        
        if tde_enabled and not key_exists:
            print("2. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        
        if not test_success:
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ")
    
    print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("- –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è TDE: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TDE_ENABLED=true –≤ .env")
    print("- –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è TDE: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TDE_ENABLED=false –≤ .env")
    print("- –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î: python -c \"from scripts.fix_tde_issue import run_migration; run_migration()\"")
    print("- –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã: python scripts/fix_tde_issue.py")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")