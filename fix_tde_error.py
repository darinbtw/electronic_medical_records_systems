"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ TDE –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
–û—à–∏–±–∫–∞: 'phone' –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.insert(0, str(Path(__file__).parent))

def fix_tde_encryption_error():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è TDE"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò TDE")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ TDE
        tde_enabled = os.getenv('TDE_ENABLED', 'False').lower() == 'true'
        
        if not tde_enabled:
            print("‚ö†Ô∏è TDE –æ—Ç–∫–ª—é—á–µ–Ω –≤ .env - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –æ—à–∏–±–∫–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
            env_file = '.env'
            if os.path.exists(env_file):
                with open(env_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º TDE –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                content = content.replace('TDE_ENABLED=True', 'TDE_ENABLED=False')
                
                with open(env_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print("‚úÖ TDE –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤ .env")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º TDE –º–æ–¥—É–ª—å
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TDE –º–æ–¥—É–ª—è...")
        
        try:
            from src.security.tde import TDEManager
            print("‚úÖ TDE –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            tde = TDEManager()
            test_phone = "+7 (999) 123-45-67"
            
            try:
                encrypted, iv = tde.encrypt_field('patients', 'phone', test_phone)
                decrypted = tde.decrypt_field('patients', 'phone', encrypted, iv)
                
                if test_phone == decrypted:
                    print("‚úÖ TDE —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("‚ùå TDE —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                    return False
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ TDE —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
                print("üîß –û—Ç–∫–ª—é—á–∞–µ–º TDE –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã...")
                return disable_tde_temporarily()
                
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TDE: {e}")
            return disable_tde_temporarily()
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return disable_tde_temporarily()

def disable_tde_temporarily():
    """–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ TDE"""
    print("üîß –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ TDE...")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º .env
        env_file = '.env'
        if os.path.exists(env_file):
            with open(env_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –û—Ç–∫–ª—é—á–∞–µ–º TDE
            if 'TDE_ENABLED=True' in content:
                content = content.replace('TDE_ENABLED=True', 'TDE_ENABLED=False')
            elif 'TDE_ENABLED' not in content:
                content += '\nTDE_ENABLED=False\n'
            
            with open(env_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ TDE –æ—Ç–∫–ª—é—á–µ–Ω –≤ .env")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ TDE
        from src.database.connection import db
        
        if db.test_connection():
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ TDE")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î –æ—Å—Ç–∞—é—Ç—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è TDE: {e}")
        return False

def fix_api_routes():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ TDE"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API —Ñ–∞–π–ª
        api_file = 'src/api/russian_routes.py'
        
        if os.path.exists(api_file):
            with open(api_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if 'try:' in content and 'except Exception as e:' in content:
                print("‚úÖ API –º–∞—Ä—à—Ä—É—Ç—ã –∏–º–µ—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫")
            else:
                print("‚ö†Ô∏è API –º–∞—Ä—à—Ä—É—Ç—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫")
            
            return True
        else:
            print(f"‚ùå –§–∞–π–ª {api_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        return False

def test_patient_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –±–µ–∑ TDE"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞...")
    
    try:
        from src.database.connection import db
        
        test_patient = {
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'middle_name': '–¢–µ—Å—Ç–æ–≤–∏—á',
            'birth_date': '1990-01-01',
            'gender': 'M',
            'phone': '+7 (999) 000-00-01',
            'email': 'test.fix@example.com',
            'address': '–≥. –¢–µ—Å—Ç–æ–≤—ã–π, —É–ª. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –¥. 1'
        }
        
        with db.get_cursor() as cursor:
            cursor.execute("""
                INSERT INTO patients 
                (first_name, last_name, middle_name, birth_date, gender, phone, email, address)
                VALUES (%(first_name)s, %(last_name)s, %(middle_name)s, %(birth_date)s, 
                        %(gender)s, %(phone)s, %(email)s, %(address)s)
                RETURNING id
            """, test_patient)
            
            patient_id = cursor.fetchone()['id']
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {patient_id}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            cursor.execute("DELETE FROM patients WHERE id = %s", (patient_id,))
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
        return False

def create_simple_api_routes():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –±–µ–∑ TDE"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
    
    simple_routes_content = '''
# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –±–µ–∑ TDE
from flask import request, jsonify
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.database.connection import db

def create_patient_simple():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –±–µ–∑ TDE"""
    data = request.get_json()
    
    required = ['first_name', 'last_name', 'birth_date', 'gender']
    for field in required:
        if field not in data:
            return jsonify({'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}'}), 400
    
    try:
        with db.get_cursor() as cursor:
            cursor.execute("""
                INSERT INTO patients 
                (first_name, last_name, middle_name, birth_date, 
                 gender, phone, email, address)
                VALUES (%(first_name)s, %(last_name)s, %(middle_name)s, 
                        %(birth_date)s, %(gender)s, %(phone)s, %(email)s, %(address)s)
                RETURNING id, created_at
            """, data)
            
            result = cursor.fetchone()
            return jsonify({
                'id': result['id'],
                'created_at': result['created_at'].isoformat(),
                'message': '–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
            }), 201
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {str(e)}'}), 500

print("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
'''
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        simple_file = 'src/api/simple_routes.py'
        os.makedirs(os.path.dirname(simple_file), exist_ok=True)
        
        with open(simple_file, 'w', encoding='utf-8') as f:
            f.write(simple_routes_content)
        
        print(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {simple_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò TDE –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–ê–¶–ò–ï–ù–¢–û–í")
    print("=" * 60)
    
    steps = [
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ TDE", fix_tde_encryption_error),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤", fix_api_routes),
        ("–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞", test_patient_creation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤", create_simple_api_routes)
    ]
    
    results = []
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        try:
            result = step_func()
            results.append(result)
            if result:
                print(f"‚úÖ {step_name} - —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö†Ô∏è {step_name} - —á–∞—Å—Ç–∏—á–Ω–æ")
        except Exception as e:
            print(f"‚ùå {step_name} - –æ—à–∏–±–∫–∞: {e}")
            results.append(False)
    
    success_count = sum(results)
    total_count = len(results)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    if success_count >= total_count * 0.75:
        print("üéâ –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:")
        print("   1. TDE –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
        print("   2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("   3. –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã: python run.py")
        
        print("\nüìã –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è TDE –≤ –±—É–¥—É—â–µ–º:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   2. –ò–∑–º–µ–Ω–∏—Ç–µ TDE_ENABLED=True –≤ .env")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ python setup_tde.py")
        
    else:
        print("‚ö†Ô∏è –ù–ï –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏")
    
    return success_count >= total_count * 0.75

if __name__ == "__main__":
    try:
        success = main()
        
        if success:
            print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"1. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ TDE (–¥–∞–Ω–Ω—ã–µ –Ω–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è)")
            print(f"2. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
            print(f"3. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏—ë–º—ã –∏ –º–µ–¥–∫–∞—Ä—Ç—ã")
            print(f"4. TDE –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏")
        
        input(f"\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        
    except KeyboardInterrupt:
        print(f"\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")