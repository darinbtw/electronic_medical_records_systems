#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã "Invalid Date" –≤ —Å–∏—Å—Ç–µ–º–µ –º–µ–¥–∫–∞—Ä—Ç
"""

import os
import sys
from pathlib import Path
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.insert(0, str(Path(__file__).parent))

def fix_invalid_dates():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞—Ç –≤ –ë–î"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 'Invalid Date'")
    print("=" * 50)
    
    try:
        from src.database.connection import db
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        with db.get_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            cursor.execute("""
                SELECT id, first_name, last_name, birth_date 
                FROM patients 
                ORDER BY id
            """)
            
            patients = cursor.fetchall()
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(patients)}")
            
            fixed_count = 0
            problem_dates = []
            
            for patient in patients:
                birth_date = patient['birth_date']
                patient_name = f"{patient['last_name']} {patient['first_name']}"
                
                print(f"   üë§ {patient_name}: {birth_date}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
                if birth_date:
                    try:
                        if isinstance(birth_date, str):
                            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É
                            test_date = datetime.strptime(birth_date, '%Y-%m-%d').date()
                        elif isinstance(birth_date, date):
                            test_date = birth_date
                        else:
                            test_date = birth_date
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                        current_year = datetime.now().year
                        if test_date.year < 1900 or test_date.year > current_year:
                            problem_dates.append({
                                'id': patient['id'],
                                'name': patient_name,
                                'date': birth_date,
                                'reason': '–ù–µ—Ä–∞–∑—É–º–Ω—ã–π –≥–æ–¥'
                            })
                        
                    except Exception as e:
                        problem_dates.append({
                            'id': patient['id'],
                            'name': patient_name,
                            'date': birth_date,
                            'reason': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}'
                        })
            
            if problem_dates:
                print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞—Ç: {len(problem_dates)}")
                for problem in problem_dates:
                    print(f"   ‚ùå {problem['name']}: {problem['date']} ({problem['reason']})")
                
                print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞—Ç...")
                
                for problem in problem_dates:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 01.01.1990
                    default_date = '1990-01-01'
                    
                    cursor.execute("""
                        UPDATE patients 
                        SET birth_date = %s
                        WHERE id = %s
                    """, (default_date, problem['id']))
                    
                    print(f"   ‚úÖ {problem['name']}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {default_date}")
                    fixed_count += 1
                
                print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∞—Ç: {fixed_count}")
            else:
                print("‚úÖ –í—Å–µ –¥–∞—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –ø—Ä–∏—ë–º–æ–≤
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç –ø—Ä–∏—ë–º–æ–≤...")
            
            cursor.execute("""
                SELECT COUNT(*) as count FROM appointments 
                WHERE appointment_date IS NULL
            """)
            
            null_appointments = cursor.fetchone()['count']
            
            if null_appointments > 0:
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏—ë–º–æ–≤ —Å NULL –¥–∞—Ç–æ–π: {null_appointments}")
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –¥–∞—Ç—ã –ø—Ä–∏—ë–º–æ–≤
                cursor.execute("""
                    UPDATE appointments 
                    SET appointment_date = CURRENT_TIMESTAMP
                    WHERE appointment_date IS NULL
                """)
                
                print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ NULL –¥–∞—Ç –ø—Ä–∏—ë–º–æ–≤: {null_appointments}")
            else:
                print("‚úÖ –í—Å–µ –¥–∞—Ç—ã –ø—Ä–∏—ë–º–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç: {e}")
        return False

def test_date_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç"""
    print("\nüß™ –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–ê–¢")
    print("=" * 40)
    
    test_dates = [
        '2024-06-30',
        '1990-01-01', 
        '1985-12-25',
        None,
        '',
        'invalid-date'
    ]
    
    for test_date in test_dates:
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ API
            if test_date:
                if isinstance(test_date, str) and '-' in test_date:
                    parsed_date = datetime.strptime(test_date, '%Y-%m-%d').date()
                    formatted = parsed_date.strftime('%d.%m.%Y')
                    print(f"   ‚úÖ {test_date} ‚Üí {formatted}")
                else:
                    print(f"   ‚ö†Ô∏è {test_date} ‚Üí –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            else:
                print(f"   ‚ö†Ô∏è {test_date} ‚Üí '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'")
                
        except Exception as e:
            print(f"   ‚ùå {test_date} ‚Üí –æ—à–∏–±–∫–∞: {e}")

def create_test_patients_with_valid_dates():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏"""
    print("\nüë• –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ü–ê–¶–ò–ï–ù–¢–û–í")
    print("=" * 40)
    
    try:
        from src.database.connection import db
        
        test_patients = [
            {
                'first_name': '–ò–≤–∞–Ω',
                'last_name': '–¢–µ—Å—Ç–æ–≤—ã–π',
                'middle_name': '–ò–≤–∞–Ω–æ–≤–∏—á',
                'birth_date': '1990-01-15',
                'gender': 'M',
                'phone': '+7 (999) 111-11-11',
                'email': 'ivan.test@example.com'
            },
            {
                'first_name': '–ú–∞—Ä–∏—è',
                'last_name': '–¢–µ—Å—Ç–æ–≤–∞—è',
                'middle_name': '–ü–µ—Ç—Ä–æ–≤–Ω–∞',
                'birth_date': '1985-05-20',
                'gender': 'F',
                'phone': '+7 (999) 222-22-22',
                'email': 'maria.test@example.com'
            },
            {
                'first_name': '–ê–ª–µ–∫—Å–µ–π',
                'last_name': '–¢–µ—Å—Ç–æ–≤—ã–π',
                'middle_name': '–°–µ—Ä–≥–µ–µ–≤–∏—á',
                'birth_date': '1992-11-10',
                'gender': 'M',
                'phone': '+7 (999) 333-33-33',
                'email': 'alexey.test@example.com'
            }
        ]
        
        with db.get_cursor() as cursor:
            created_count = 0
            
            for patient in test_patients:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ü–∏–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    cursor.execute("""
                        SELECT id FROM patients 
                        WHERE email = %s
                    """, (patient['email'],))
                    
                    if cursor.fetchone():
                        print(f"   ‚ö†Ô∏è {patient['first_name']} {patient['last_name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        continue
                    
                    cursor.execute("""
                        INSERT INTO patients 
                        (first_name, last_name, middle_name, birth_date, gender, phone, email)
                        VALUES (%(first_name)s, %(last_name)s, %(middle_name)s, 
                                %(birth_date)s, %(gender)s, %(phone)s, %(email)s)
                        RETURNING id
                    """, patient)
                    
                    patient_id = cursor.fetchone()['id']
                    created_count += 1
                    
                    print(f"   ‚úÖ {patient['first_name']} {patient['last_name']} —Å–æ–∑–¥–∞–Ω (ID: {patient_id})")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {patient['first_name']}: {e}")
            
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {created_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        return False

def update_web_interface_date_handling():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ JavaScript –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç"""
    print("\nüåê –£–õ–£–ß–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–¢ –í –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ï")
    print("=" * 50)
    
    js_date_fix = '''
// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function safeDateFormat(dateString) {
    if (!dateString || dateString === 'null' || dateString === 'undefined') {
        return '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    }
    
    try {
        // –ï—Å–ª–∏ —É–∂–µ –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (dateString.includes('.')) {
            return dateString;
        }
        
        // –ï—Å–ª–∏ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
        let date;
        if (dateString.includes('T')) {
            date = new Date(dateString);
        } else if (dateString.includes('-')) {
            // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç
            const parts = dateString.split('-');
            date = new Date(parts[0], parts[1] - 1, parts[2]);
        } else {
            date = new Date(dateString);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (isNaN(date.getTime())) {
            console.warn('Invalid date:', dateString);
            return dateString;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Ä—É—Å—Å–∫–æ–º —Å—Ç–∏–ª–µ
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        
        return `${day}.${month}.${year}`;
        
    } catch (error) {
        console.error('Date formatting error:', error);
        return dateString || '–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function fixAllDatesOnPage() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
    document.querySelectorAll('[data-date]').forEach(element => {
        const dateValue = element.getAttribute('data-date');
        element.textContent = safeDateFormat(dateValue);
    });
    
    console.log('‚úÖ –í—Å–µ –¥–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', fixAllDatesOnPage);
'''
    
    print("üìù JavaScript –∫–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç:")
    print(js_date_fix)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    try:
        js_file = 'static/js/date-fix.js'
        os.makedirs(os.path.dirname(js_file), exist_ok=True)
        
        with open(js_file, 'w', encoding='utf-8') as f:
            f.write(js_date_fix)
        
        print(f"‚úÖ JavaScript —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {js_file}")
        print("üìã –î–æ–±–∞–≤—å—Ç–µ –≤ HTML: <script src='/static/js/date-fix.js'></script>")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JavaScript: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç"""
    print("üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 'Invalid Date'")
    print("=" * 60)
    
    steps = [
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç –≤ –ë–î", fix_invalid_dates),
        ("–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", test_date_formatting),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", create_test_patients_with_valid_dates),
        ("–£–ª—É—á—à–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", update_web_interface_date_handling)
    ]
    
    results = []
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        try:
            result = step_func()
            results.append(result)
            if result:
                print(f"‚úÖ {step_name} - —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö†Ô∏è {step_name} - —á–∞—Å—Ç–∏—á–Ω–æ")
        except Exception as e:
            print(f"‚ùå {step_name} - –æ—à–∏–±–∫–∞: {e}")
            results.append(False)
    
    success_count = sum(results)
    total_count = len(results)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    if success_count >= 3:
        print("üéâ –ü–†–û–ë–õ–ï–ú–ê 'Invalid Date' –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        print("\n‚úÖ –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
        print("   1. –î–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print("   2. –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω—ã")
        print("   3. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print("   4. –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏")
        
        print("\nüöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:")
        print("   python run.py")
        
        print("\nüìã –¢–µ–ø–µ—Ä—å –¥–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:")
        print("   ‚ùå –ë—ã–ª–æ: Invalid Date")
        print("   ‚úÖ –°—Ç–∞–ª–æ: 15.01.1990")
        
    else:
        print("‚ö†Ô∏è –ù–ï –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
    
    return success_count >= 3

if __name__ == "__main__":
    try:
        success = main()
        
        if success:
            print(f"\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
            print(f"1. –û–±–Ω–æ–≤–∏—Ç–µ web_interface.html (—É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω)")
            print(f"2. –û–±–Ω–æ–≤–∏—Ç–µ API –º–∞—Ä—à—Ä—É—Ç—ã (—É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã)")
            print(f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: python run.py")
            print(f"4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç")
        
        input(f"\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        
    except KeyboardInterrupt:
        print(f"\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")