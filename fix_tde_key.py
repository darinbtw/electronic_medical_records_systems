#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ TDE
–£–¥–∞–ª—è–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–ª—é—á–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
"""

import os
import sys
from pathlib import Path

def fix_tde_key():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ TDE –∫–ª—é—á–∞"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TDE –ö–õ–Æ–ß–ê")
    print("=" * 40)
    
    # –§–∞–π–ª—ã –∫–ª—é—á–µ–π TDE
    tde_files = [
        '.tde_master_key',
        '.encryption_key',
        '.tde_master_key.backup.*'
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TDE —Ñ–∞–π–ª–æ–≤...")
    
    for tde_file in tde_files[:2]:  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(tde_file):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(tde_file)
                print(f"üìÑ –ù–∞–π–¥–µ–Ω {tde_file}: {file_size} –±–∞–π—Ç")
                
                if file_size == 0:
                    print(f"‚ö†Ô∏è –§–∞–π–ª {tde_file} –ø—É—Å—Ç–æ–π!")
                    
                    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                    os.remove(tde_file)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª {tde_file}")
                    
                elif tde_file == '.tde_master_key':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Ñ–æ—Ä–º–∞—Ç
                    try:
                        with open(tde_file, 'r') as f:
                            content = f.read().strip()
                            
                        if not content:
                            print(f"‚ö†Ô∏è –§–∞–π–ª {tde_file} –ø—É—Å—Ç–æ–π!")
                            os.remove(tde_file)
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª {tde_file}")
                        elif not content.startswith('{'):
                            print(f"‚ö†Ô∏è –§–∞–π–ª {tde_file} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON!")
                            
                            # –°–æ–∑–¥–∞–µ–º backup –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                            backup_name = f"{tde_file}.corrupted.backup"
                            os.rename(tde_file, backup_name)
                            print(f"üíæ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {backup_name}")
                        else:
                            import json
                            try:
                                with open(tde_file, 'r') as f:
                                    json.load(f)
                                print(f"‚úÖ –§–∞–π–ª {tde_file} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                            except json.JSONDecodeError as e:
                                print(f"‚ùå JSON –æ—à–∏–±–∫–∞ –≤ {tde_file}: {e}")
                                
                                # –°–æ–∑–¥–∞–µ–º backup –∏ —É–¥–∞–ª—è–µ–º
                                backup_name = f"{tde_file}.corrupted.backup"
                                os.rename(tde_file, backup_name)
                                print(f"üíæ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {backup_name}")
                                
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {tde_file}: {e}")
                        
                        # –°–æ–∑–¥–∞–µ–º backup –∏ —É–¥–∞–ª—è–µ–º
                        backup_name = f"{tde_file}.corrupted.backup"
                        try:
                            os.rename(tde_file, backup_name)
                            print(f"üíæ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {backup_name}")
                        except:
                            os.remove(tde_file)
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {tde_file}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {tde_file}: {e}")
        else:
            print(f"üìÑ –§–∞–π–ª {tde_file} –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
    
    print("\nüîß –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï TDE –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 40)
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º TDE –≤ .env
    env_file = '.env'
    if os.path.exists(env_file):
        try:
            with open(env_file, 'r', encoding='utf-8') as f:
                env_content = f.read()
            
            # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º TDE_ENABLED
            lines = env_content.split('\n')
            new_lines = []
            tde_found = False
            
            for line in lines:
                if line.strip().startswith('TDE_ENABLED'):
                    new_lines.append('TDE_ENABLED=False  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
                    tde_found = True
                    print("üîß TDE_ENABLED —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ False")
                else:
                    new_lines.append(line)
            
            if not tde_found:
                new_lines.append('')
                new_lines.append('# TDE Settings')
                new_lines.append('TDE_ENABLED=False  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
                print("üîß –î–æ–±–∞–≤–ª–µ–Ω TDE_ENABLED=False")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env
            with open(env_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(new_lines))
            
            print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")
    else:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π .env
        env_content = """# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DB_HOST=localhost
DB_PORT=5432
DB_NAME=medical_records
DB_USER=postgres
DB_PASSWORD=

# TDE –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
TDE_ENABLED=False

# API
API_HOST=0.0.0.0
API_PORT=8000
API_DEBUG=True
"""
        
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª .env")

def create_fixed_tde_setup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ setup –¥–ª—è TDE"""
    print("\nüõ†Ô∏è –°–û–ó–î–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û TDE SETUP")
    print("=" * 40)
    
    setup_script = """#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TDE —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫
\"\"\"

import os
import sys
import json
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def safe_tde_setup():
    \"\"\"–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TDE\"\"\"
    print("üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê TDE")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã
    tde_files = ['.tde_master_key', '.encryption_key']
    for tde_file in tde_files:
        if os.path.exists(tde_file):
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª {tde_file}")
            choice = input(f"–£–¥–∞–ª–∏—Ç—å {tde_file}? (y/n): ").lower()
            if choice == 'y':
                os.remove(tde_file)
                print(f"üóëÔ∏è –§–∞–π–ª {tde_file} —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª {tde_file} –æ—Å—Ç–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞!")
    
    # –í–∫–ª—é—á–∞–µ–º TDE –≤ .env
    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            env_content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º TDE_ENABLED –Ω–∞ True
        env_content = env_content.replace('TDE_ENABLED=False', 'TDE_ENABLED=True')
        
        # –î–æ–±–∞–≤–ª—è–µ–º TDE –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'TDE_MASTER_KEY_FILE' not in env_content:
            env_content += \"\"\"

# TDE Settings (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
TDE_ENABLED=True
TDE_MASTER_KEY_FILE=.tde_master_key
TDE_KEY_ROTATION_DAYS=90
TDE_BACKUP_KEYS=True
\"\"\"
        
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print("‚úÖ TDE –≤–∫–ª—é—á–µ–Ω –≤ .env")
    
    # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TDE
    try:
        print("\\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TDE...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['TDE_ENABLED'] = 'True'
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TDE –º–æ–¥—É–ª—å
        sys.path.insert(0, '.')
        from src.security.tde import TDEManager
        
        # –°–æ–∑–¥–∞–µ–º TDE –º–µ–Ω–µ–¥–∂–µ—Ä (–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏)
        tde = TDEManager()
        print("‚úÖ TDE –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = tde.get_encryption_info()
        print(f"\\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è TDE:")
        print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º: {info['algorithm']}")
        print(f"   –ì–ª–∞–≤–Ω—ã–π –∫–ª—é—á: {'‚úÖ' if info['master_key_exists'] else '‚ùå'}")
        print(f"   –¢–∞–±–ª–∏—Ü –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {len(info['encrypted_tables'])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TDE: {e}")
        print("\\nüîß –†–µ—à–µ–Ω–∏–µ: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ë–ï–ó TDE")
        print("   TDE_ENABLED=False –≤ .env")
        return False

if __name__ == "__main__":
    safe_tde_setup()
"""
    
    with open('safe_tde_setup.py', 'w', encoding='utf-8') as f:
        f.write(setup_script)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç safe_tde_setup.py")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° TDE –ö–õ–Æ–ß–û–ú")
    print("=" * 50)
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª .tde_master_key –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
    print("–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞:")
    print("  1. –§–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("  2. –°–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞")
    print("  3. –§–∞–π–ª –±—ã–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
    print("")
    
    choice = input("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ").lower()
    
    if choice != 'y':
        print("üõë –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        print("\\n–î–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("1. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª .tde_master_key")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TDE_ENABLED=False –≤ .env")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É")
        return
    
    print("\\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á TDE
    fix_tde_key()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    create_fixed_tde_setup()
    
    print("\\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 40)
    print("üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("\\n1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ë–ï–ó TDE:")
    print("   python run.py")
    print("\\n2. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å TDE:")
    print("   python safe_tde_setup.py")
    print("\\n3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
    print("   (–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ)")
    
    print("\\nüìù –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    print("  ‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–ª—é—á–µ–π")
    print("  ‚úÖ TDE –æ—Ç–∫–ª—é—á–µ–Ω –≤ .env")
    print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è")
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TDE")
    print("\\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
    print("  - TDE –æ—Ç–∫–ª—é—á–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ")
    print("  - –î–∞–Ω–Ω—ã–µ –≤ –ë–î –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã")
    print("  - –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ backup")

if __name__ == "__main__":
    main()