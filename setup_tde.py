# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: setup_tde.py

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.insert(0, str(Path(__file__).parent))

def setup_tde():
    """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TDE –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–µ–¥–∫–∞—Ä—Ç"""
    
    print("üîí –ù–ê–°–¢–†–û–ô–ö–ê TRANSPARENT DATA ENCRYPTION (TDE)")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        from cryptography.hazmat.primitives.ciphers import Cipher
        print("‚úÖ cryptography —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå cryptography –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install cryptography")
        return False
    
    try:
        import psycopg2
        print("‚úÖ psycopg2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install psycopg2-binary")
        return False
    
    # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_file = '.env'
    if not os.path.exists(env_file):
        print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
    with open(env_file, 'r', encoding='utf-8') as f:
        env_content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º TDE –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    tde_settings = """
# TDE Settings
TDE_ENABLED=True
TDE_MASTER_KEY_FILE=.tde_master_key
TDE_KEY_ROTATION_DAYS=90
"""
    
    if 'TDE_ENABLED' not in env_content:
        with open(env_file, 'a', encoding='utf-8') as f:
            f.write(tde_settings)
        print("‚úÖ TDE –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env")
    else:
        print("‚úÖ TDE –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ .env")
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ TDE –º–æ–¥—É–ª—è
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ TDE –º–æ–¥—É–ª—è...")
    
    tde_file = 'src/security/tde.py'
    if os.path.exists(tde_file):
        print(f"‚úÖ {tde_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"‚ùå {tde_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        return False
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TDE
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TDE...")
    
    try:
        from src.security.tde import TDEManager, test_tde
        test_tde()
        print("‚úÖ TDE —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TDE —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    # –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
    print("\n5Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.security.tde import upgrade_database_for_tde
        upgrade_database_for_tde()
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è TDE")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        return False
    
    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å TDE
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å TDE...")
    
    try:
        from src.database.connection import db
        
        if db.test_connection():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å TDE —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TDE
            conn_info = db.get_connection_info()
            if conn_info.get('tde_enabled'):
                print("‚úÖ TDE –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
                
                tde_info = conn_info.get('tde_info', {})
                print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º: {tde_info.get('algorithm', 'N/A')}")
                print(f"   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {tde_info.get('encrypted_tables', 'N/A')}")
                print(f"   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π: {tde_info.get('total_encrypted_fields', 'N/A')}")
            else:
                print("‚ö†Ô∏è TDE –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    # –®–∞–≥ 7: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\n7Ô∏è‚É£ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    choice = input("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ TDE? (y/n): ").lower()
    if choice == 'y':
        try:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ!")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ 'MIGRATE' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
            
            if confirm == 'MIGRATE':
                db.enable_tde_for_existing_data()
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                print("üõë –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    else:
        print("‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê TDE –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
    
    try:
        from src.security.tde import TDEManager
        tde = TDEManager()
        info = tde.get_encryption_info()
        
        print(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {info['algorithm']}")
        print(f"‚úÖ –î–µ—Ä–∏–≤–∞—Ü–∏—è –∫–ª—é—á–µ–π: {info['key_derivation']}")
        print(f"‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏–π PBKDF2: {info['iterations']}")
        print(f"‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(info['encrypted_tables'])}")
        print(f"‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π: {info['total_encrypted_fields']}")
        print(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∫–ª—é—á: {'–ï—Å—Ç—å' if info['master_key_exists'] else '–ù–µ—Ç'}")
        
        print(f"\nüìã –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for table in info['encrypted_tables']:
            fields = tde.encrypted_fields[table]
            print(f"   - {table}: {', '.join(fields)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    print(f"\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
    print(f"–ó–∞–ø—É—Å–∫: python run.py")
    print(f"\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
    print(f"   - –í—Å–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print(f"   - –ö–ª—é—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –¥–∞–Ω–Ω—ã—Ö")
    print(f"   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AES-256-CBC —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
    print(f"   - –ö–∞–∂–¥–æ–µ –ø–æ–ª–µ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π IV")
    
    return True


def check_tde_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ TDE"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê TDE")
    print("=" * 40)
    
    try:
        from src.database.connection import db
        from src.security.tde import TDEManager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        conn_info = db.get_connection_info()
        
        print(f"TDE –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if conn_info.get('tde_enabled') else '‚ùå'}")
        
        if conn_info.get('tde_enabled'):
            tde = TDEManager()
            info = tde.get_encryption_info()
            
            print(f"–ì–ª–∞–≤–Ω—ã–π –∫–ª—é—á: {'‚úÖ' if info['master_key_exists'] else '‚ùå'}")
            print(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(info['encrypted_tables'])}")
            print(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π: {info['total_encrypted_fields']}")
            
            # –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            try:
                test_data = "Test TDE Status"
                ciphertext, iv = tde.encrypt_field('patients', 'phone', test_data)
                decrypted = tde.decrypt_field('patients', 'phone', ciphertext, iv)
                print(f"–¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {'‚úÖ' if test_data == decrypted else '‚ùå'}")
            except Exception as e:
                print(f"–¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ‚ùå ({e})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False


def rotate_tde_keys():
    """–†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π TDE"""
    
    print("üîÑ –†–û–¢–ê–¶–ò–Ø –ö–õ–Æ–ß–ï–ô TDE")
    print("=" * 40)
    
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è:")
    print("   1. –°–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á")
    print("   2. –ü–µ—Ä–µ—à–∏—Ñ—Ä—É–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º")
    print("   3. –ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ 'ROTATE' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    if confirm != 'ROTATE':
        print("üõë –†–æ—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return False
    
    try:
        from src.security.tde import TDEManager
        from src.database.connection import db
        
        # –°–æ–∑–¥–∞–µ–º backup —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞
        old_key_file = '.tde_master_key'
        backup_key_file = f'.tde_master_key.backup.{int(time.time())}'
        
        if os.path.exists(old_key_file):
            import shutil
            shutil.copy2(old_key_file, backup_key_file)
            print(f"‚úÖ Backup —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞: {backup_key_file}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
        if os.path.exists(old_key_file):
            os.remove(old_key_file)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π TDEManager (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –∫–ª—é—á)
        new_tde = TDEManager()
        print("‚úÖ –ù–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω")
        
        # –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        print("üîÑ –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
        
        print("‚úÖ –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é TDE —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    while True:
        print("\nüîí –£–ü–†–ê–í–õ–ï–ù–ò–ï TDE")
        print("=" * 30)
        print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å TDE")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å TDE")
        print("3. –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π TDE")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
        
        if choice == '1':
            setup_tde()
        elif choice == '2':
            check_tde_status()
        elif choice == '3':
            rotate_tde_keys()
        elif choice == '4':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")