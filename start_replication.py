#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ô —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ PostgreSQL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""
import os
import subprocess
import time
import psycopg2
import sys

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω"""
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker –Ω–∞–π–¥–µ–Ω:", result.stdout.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker daemon —Ä–∞–±–æ—Ç–∞–µ—Ç
            result = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
            if result.returncode == 0:
                return True
            else:
                print("‚ùå Docker Desktop –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
                print("üëâ –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏")
                return False
        else:
            print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
        return False

def cleanup_old_containers():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    subprocess.run(['docker-compose', '-f', 'docker-compose-repl.yml', 'down', '-v'], capture_output=True)
    time.sleep(2)

def start_replication():
    """–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π"""
    
    if not check_docker():
        print("\n‚ö†Ô∏è  –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop")
        print("2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (1-2 –º–∏–Ω—É—Ç—ã)")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return False
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ PostgreSQL...")
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π docker-compose —Ñ–∞–π–ª
    docker_compose = """services:
  master:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: medical_records
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command: |
      postgres
      -c wal_level=replica
      -c max_wal_senders=10
      -c max_replication_slots=10
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  slave1:
    image: postgres:16-alpine
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    depends_on:
      master:
        condition: service_healthy
    command: |
      bash -c '
      echo "Waiting for master..."
      until PGPASSWORD=postgres psql -h master -U postgres -c "SELECT 1" > /dev/null 2>&1; do
        sleep 1
      done
      echo "Master is ready, creating basebackup..."
      rm -rf /var/lib/postgresql/data/*
      PGPASSWORD=postgres pg_basebackup -h master -D /var/lib/postgresql/data -U postgres -v -P -W -R
      echo "Starting slave1..."
      postgres
      '

  slave2:
    image: postgres:16-alpine
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    depends_on:
      master:
        condition: service_healthy
    command: |
      bash -c '
      echo "Waiting for master..."
      sleep 10
      until PGPASSWORD=postgres psql -h master -U postgres -c "SELECT 1" > /dev/null 2>&1; do
        sleep 1
      done
      echo "Master is ready, creating basebackup..."
      rm -rf /var/lib/postgresql/data/*
      PGPASSWORD=postgres pg_basebackup -h master -D /var/lib/postgresql/data -U postgres -v -P -W -R
      echo "Starting slave2..."
      postgres
      '
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open('docker-compose-repl.yml', 'w') as f:
        f.write(docker_compose)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    cleanup_old_containers()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    print("üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    try:
        result = subprocess.run(['docker-compose', '-f', 'docker-compose-repl.yml', 'up', '-d'], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:", result.stderr)
            return False
            
        print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("‚è≥ –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞...")
        for i in range(30, 0, -1):
            print(f"\r‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {i} —Å–µ–∫—É–Ω–¥...", end='', flush=True)
            time.sleep(1)
        print("\r‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞    ")
        
        # –î–∞–µ–º —Ä–µ–ø–ª–∏–∫–∞–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        time.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—é
        return check_replication()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_replication():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ü–õ–ò–ö–ê–¶–ò–ò:")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ master –¥–æ—Å—Ç—É–ø–µ–Ω
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Master (5432)...")
        conn = psycopg2.connect(
            host='localhost',
            port=5432,
            database='medical_records',
            user='postgres',
            password='postgres',
            connect_timeout=5
        )
        cursor = conn.cursor()
        print("‚úÖ Master –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–µ–∫—Ç–∞...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS patients (
                id SERIAL PRIMARY KEY,
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
        cursor.execute("""
            SELECT 
                application_name,
                client_addr,
                state,
                sync_state,
                replay_lag
            FROM pg_stat_replication
        """)
        
        replicas = cursor.fetchall()
        
        if replicas:
            print(f"\n‚úÖ –†–ï–ü–õ–ò–ö–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–ª–∏–∫: {len(replicas)}")
            for replica in replicas:
                print(f"\n   üì° –†–µ–ø–ª–∏–∫–∞: {replica[0]}")
                print(f"      IP: {replica[1]}")
                print(f"      –°—Ç–∞—Ç—É—Å: {replica[2]}")
                print(f"      –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {replica[3]}")
                print(f"      –ó–∞–¥–µ—Ä–∂–∫–∞: {replica[4] or '–Ω–µ—Ç'}")
        else:
            print("\n‚ö†Ô∏è  –†–µ–ø–ª–∏–∫–∏ –µ—â–µ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è...")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –∫–æ–º–∞–Ω–¥–æ–π:")
            print("   docker exec electronic_medical_records_systems-master-1 psql -U postgres -c \"SELECT * FROM pg_stat_replication;\"")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        print("\nüìù –¢–µ—Å—Ç —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏...")
        cursor.execute("INSERT INTO patients (first_name, last_name) VALUES ('–¢–µ—Å—Ç', '–†–µ–ø–ª–∏–∫–∞—Ü–∏–∏')")
        conn.commit()
        cursor.execute("SELECT COUNT(*) FROM patients")
        count_master = cursor.fetchone()[0]
        print(f"‚úÖ Master: {count_master} –∑–∞–ø–∏—Å–µ–π")
        
        cursor.close()
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º slaves
        for port, name in [(5433, 'Slave1'), (5434, 'Slave2')]:
            try:
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {name} (–ø–æ—Ä—Ç {port})...")
                conn_slave = psycopg2.connect(
                    host='localhost',
                    port=port,
                    database='medical_records',
                    user='postgres',
                    password='postgres',
                    connect_timeout=5
                )
                cursor_slave = conn_slave.cursor()
                
                cursor_slave.execute("SELECT COUNT(*) FROM patients")
                count = cursor_slave.fetchone()[0]
                print(f"‚úÖ {name}: {count} –∑–∞–ø–∏—Å–µ–π - —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
                cursor_slave.close()
                conn_slave.close()
            except Exception as e:
                print(f"‚ö†Ô∏è  {name} –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤: {str(e)[:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. PostgreSQL —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5432")
        print("   2. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—â–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è")
        print("\nüõ†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π PostgreSQL")
        print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose -f docker-compose-repl.yml logs")
        return False
    
    finally:
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print("   Master: localhost:5432")
        print("   Slave1: localhost:5433") 
        print("   Slave2: localhost:5434")
        
        print("\nüõ†Ô∏è –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose-repl.yml ps")
        print("   –õ–æ–≥–∏: docker-compose -f docker-compose-repl.yml logs")
        print("   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker-compose-repl.yml down")
        
        print("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏:")
        print('   docker exec electronic_medical_records_systems-master-1 psql -U postgres -c "SELECT * FROM pg_stat_replication;"')

if __name__ == "__main__":
    if start_replication():
        print("\nüéâ –†–ï–ü–õ–ò–ö–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù–ê!")
        print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ run.py - –æ–Ω —É–≤–∏–¥–∏—Ç —Ä–∞–±–æ—Ç–∞—é—â—É—é —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—é")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—é")
        sys.exit(1)